{"posts":[{"title":"第1课 李さんは　中国人","text":"概述：第一课主要学习“～は”，“～です”句型，相当与“是”，以及以及简单的自我介绍和寒暄 1. 词汇 1.1 课后词汇 假名 释义 中国人 ちゅうごくじん 中国人 日本人 にほんじん 日本人 韓国人 かんこくじん 韩国人 アメリカ人 アメリカ人 美国人 フランス人 フランス人 法国人 学生 がくせい 学生 先生 せんせい 老师 留学生 りゅうがくせい 留学生 教授 きょうじゅ 教授 社員 しゃいん 职员 会社員 かいしゃいん 公司职员 店員 てんいん 店员 研修生 けんしゅうせい 进修生 企業 きぎょう 企业 大学 だいがく 大学 父親 ちち （我）父亲 課長 かちょう 科长 社長 しゃちょう 总经理，社长 出迎え でむかえ 迎接 あの人 あのひと 私 わたし 我 貴方 あなた 你 どうも 非常，很 はい 哎，是 いいえ 不，不是 東京大学 とうきょうだいがく 东京大学 北京大学 ペキンだいがく 北京大学 こちらこそ 我才要（请您~） ちがいます 不是 わかりません 不知道 さん ちゃん くん 尊称 1.2 国家/语言 国 国名 人 语言 ちゅうごく 中国 ちゅうごくじん 中国人 ちゅうごくご 中国語 にほん 日本 にほんじん 日本人 にほんご 日本語 アメリカ 美国 アメリカ人 美国人 えいご 英語 イタリア 意大利 イタリア人 意大利人 イタリア語 意大利语 インド 印度 インド人 印度人 ヒンディー語 印地语 イギリス 英国 イギリス人 英国人 えいご 英語 オーストラリア 澳大利亚 オーストラリア人 澳大利亚人 えいご 英語 かんこく 韓国 かんこくじん 韓国人 かんこくご 韓国語 スペイン 西班牙 スペイン人 西班牙人 スペイン語 西班牙语 タイ 泰国 タイ人 泰国人 タイ語 泰语 ドイツ 德国 ドイツ人 德国人 ドイツ語 德语 ブラジル 巴西 ブラジル人 巴西人 ポルトガル語 葡萄牙语 フランス 法国 フランス人 法国人 フランス語 法语 ベトナム 越南 ベトナム人 越南人 ベトナム語 越南语 メキシコ 墨西哥 メキシコ人 墨西哥人 スペイン語 西班牙语 ロシア 俄罗斯 ロシア人 俄罗斯人 ロシア語 俄语 がいこく 外国 がいこくじん 外国人 がいこくご 外语 たいりく 大陸 アジア 亚洲 ヨーロッパ 欧洲 北（きた）アメリカ 北美洲 オーストラリア 大洋洲 アフリカ 非洲 南（みなみ）アメリカ 南美洲 1.3 称呼 中 日 第一人称 我 私（わたし） 僕（ぼく） 俺（おれ） あたし 第二人称 你 あなた（恋人/夫妻） 君（きみ） お前（おまえ） 第三人称 他/她 あの人（ひと） 彼（かれ） 彼女（かのじょ） 2. 语法 2.1【名】は【名】です相当于汉语的“是“。”は“是主语部分，”~です“是谓语部分。助词”は“用于提示主题，读作”わ“。 李さん は 中国人 です。 私 は 日本人 です。 わたし は 王 てす。 2.2【名】は【名】では ありません相当于汉语的“~不是~“。”~は“是主语部分，”~です“是谓语部分。助词”は“用于提示主题，读作”わ“。 森さん は 学生 では ありません。 2.3【名】は【名】ですか（1）相当于汉语的“~是~吗？“。助词か接在句尾表示疑问。日语的问句在句尾不使用“？”。 あなた は おのさん ですか。 はい，小野です。 キムさん は 中国人 ですか。 いいえ，中国人ではありません。 （2）应答 キムさん は 中国人 ですか。 はい，そうです。 いいえ，ちがいます。 2.4【名】の【名】（1）助词“の”连接名词和名词，表示前面的名词是后面名词从属的机构、国家或属性。 李さん は ＪＣ企画 の 社員です。","link":"/2022/12/13/japanese/1/"},{"title":"第10课　京都の　紅葉は　有名です","text":"概述：二类形容词、名词作谓语变化形式。 1.词汇 1.1 课后词汇 假名 释义 紅葉 もみじ 红叶 故郷 こきょう 故乡 通り とおり 大街 町 まち 城市，街道 所 ところ 场所 お店 おみせ 餐馆；商店 人形 にんぎょう 玩偶 作品 さくひん 作品 彫刻 ちょうこく 雕刻 自動車 じどうしゃ 汽车 道具 どうぐ 工具 魚 さかな 鱼 お菓子 おかし 点心 物 もの 物品，东西 シーズン 季节 修学旅行 しゅうがくりょこう 修学旅行 観光客 かんこうきゃく 游客 作家 さっか 作家 部長 ぶちょう 部长 平日 へいじつ 平日，非休息日 日 ひ 日子 生活 せいかつ 生活 世界 せかい 世界 晴れ はれ 晴天 雨 あめ 雨 曇り くもり 阴天 雪 ゆき 雪 汚い きたない 脏 綺麗 きれい 干净 有名 ゆうめい 有名 にぎやか にぎやか 热闹，繁华 静か しずか 安静 暇 ひま 空闲 親切 しんせつ 热情 好き すき 喜欢 嫌い きらい 讨厌 便利 べんり 方便 不便 ふべん 不方便 元気 げんき 健康，有精神 簡単 かんたん 简单 ハンサム 英俊，帅气 どんな 什么样的，怎样的 どう 怎样，如何 いかが 如何 いろいろ 各种各样的 でも 可是，不过 そして 而且，于是 ところで 接续，by the way あれえ 咦 奈良 なら 奈良 富士山 ふじあさん 富士山 もう少し もうすこし 再~一点 1.2 季节 春 夏 秋 冬 はる なつ あき ふゆ 1.3 天气、气候 天気／天候 てんき／てんこう 晴れ はれ 蒸し暑い むしあつい 天気予報 てんきよほう 曇り くもり 暑い あつい 降水確率 こうすいかくりつ 雨 あめ 暖かい あたたかい 気温 きおん 雪 ゆき 涼しい すずしい 湿度 しつど 霧 きり 寒い さむい 梅雨 つゆ 雷 かみなり 台風 たいふう 風 かぜ 虹 にじ 2. 语法 2.1 名 は 二类形容词 です／でした二类形容词是不以“い”结尾的形容词。做谓语时要在后面加“です”。过去式是“でした”。 京都の 紅葉 は 有名 です。 この 通り は 静かです。 この 町 は にぎやか でした。（过去式） 2.2 名 は 二类形容词 では ありません／ありませんでした。二类形容词做谓语时的否定形式。 この 通り は にぎやか ではありません。 昨日 は 暇 じゃ ありませんでした。 2.3 名 は 二类形容词 な 名 です二类形容词修饰名词 +な。 奈良 は 静か な 町です。 奈良 は にぎやか な 町ではありません。 2.4 名 でした名词做谓语时的过去式。 昨日 は 日曜日 でした。 一昨日 は 休み でした。 昨日 は 雨 では ありませんでした。 一昨日 は 曇り じゃ ありませんでした。 2.5 どんな 名相当于汉语“什么样的” 横浜 は どんな 町 ですか。 とても にぎやか な まち です。 張さん は どんな 人 ですか。 親切 な 人 です。 2.6 どうですか询问对方对某状态的意见或感想，相当于“怎么样的”。 この 料理 は どうですか。 京都 は どうでしたか。 2.7 でも表示转折关系，相当于“但是”。 私の部屋 は 狭い です。でも，綺麗 です。 2.8 そして表示并列关系，相当于“而且”。 私の部屋 は 狭い です。そして，汚い です。","link":"/2022/12/19/japanese/10/"},{"title":"第12课　李さんは　森さんより　若いです","text":"概述：两个名词之间的比较句式，多个名词比较句式。 1.词汇 1.1 课后词汇 假名 释义 季節 きせつ 季节 冬 ふゆ 冬 春 はる 春 夏 なつ 夏 秋 あき 秋 日本料理 にほんりょうり 日本菜 寿司 すひ 寿司 バナナ 香蕉 ミカン 橘子 焼酎 しょうちゅう 烧酒 日本酒 にほんしゅ 日本酒 紅茶 こうちゃ 红茶 ウーロン茶 乌龙茶 ジャスミン茶 茉莉花茶 緑茶 りょくちゃ 绿茶 ジュース 果汁 人気 にんき 声望，受欢迎 席 せき 座位，席位 クラス 班级 種類 しゅるい 种类 背 せ 个子 兄 あに 哥哥 最近 さいきん 最近，近来 降ります ふります 下（雨，雪） 若い わかい 年轻 暖かい あたたかい 暖和 涼しい すずしい 凉爽 速い はやい 快 大好き だいすき 非常喜欢 いちばん 最，第一 ずっと ～得多 やはり／やっばり 仍然，还是 チョモランマ 珠穆朗玛 人気があります 受欢迎 ～年間 ～ねんかん ～年间 2. 语法 2.1 【名1】は 【名2】より 【一类形】/【二类形】です比较“名词1”和“名词2”，“名词1”比“名词2”更具有形容词所表示的性质时使用这个句式。程度差异较大时用副词“ずっと”加以强调 李さんは 森さん より 若いです。 上海は 北京 より 広いですか。 中国は 日本 より ずっと 広いです。 2.2 【名1】より 【名2】の ほうが【一类形】/【二类形】です比较“名词1”和“名词2”，“名词2”比“名词1”更具有形容词所表示的性质时使用这个句式。 日本 より 中国の ほうが 広いです。 大阪 より 東京の ほうが にぎやかですか。 2.3 【名1】は【名2】ほど【一类形】くないです/【二类形】でわないです比较“名词1”和“名词2”，“名词1”比“名词2”更不具有形容词所表示的性质时使用这个句式。句尾必须使用否定形式。 東京の冬は 北京の冬 ほど 寒くないです。 私の部屋は 王さんの部屋 ほど きれいではありません。 2.4【名1】の中で【名2】が いちばん【一类形】/【二类形】です在某个范围内，表示“名词2”最具有形容词的性质时使用这个句型。“名词1”为表示“名词2”所属范围的名词。“名词1”表示场所//时间时，后面不用加“の中” スポーツの 中で サッカーボール が いちばん おもしろいです。 日本で いちばん 高い 山は 富士山です。 一年で いちばん 寒い 月は 二月です。 2.5 【名1】と【名2】と どちらが 【一类形】/【二类形】ですか询问两种事物当中哪一种更具有形容词的性质时使用这个句型。“どちら”是二者选一时使用的疑问词。回答时使用“~の ほうが…”。如果两者程度相当，则使用“どちらも ~です”。”どちら”在口语中有时说成“どっち”。 日本語と英語と どちらが 難しいですか。 日本語の ほうが 難しいです。 コーヒーと紅茶と どっちが 好きですか。 どちらも 好きです。 2.6 どの【名】/いつ/どれ/だれ/何が いちばん【一类形】/【二类形】ですか询问三个以上事物当中哪一个更具有形容词的性质时，根据所询问的对象不同，须区别使用几种疑问词；是人则使用“だれが”，是物则使用“どの”，“だれ”，“何が”，时间则使用“いつ” この中で どの料理が いちばん おいしいですか。 この料理が いちばん おいしいです。 リンゴと ナシと バナナの 中で どれが いちばん 好きですか。","link":"/2022/12/23/japanese/12/"},{"title":"第11课　小野さんは　歌が　好きです","text":"概述：表示情感的形容词使用方式，能力形容词使用方式。原因、理由的使用。 1.词汇 1.1 课后词汇 假名 释义 歌 うた 歌，歌曲 カラオケ 卡拉ok ロック 摇滚乐 ポップス 流行音乐 クラシック 西方古典音乐 ピアノ 钢琴 ギター 吉他 バイオリン 小提琴 絵 え 画 英語 えいご 英语 スペイン語 西班牙语 スポーツ 体育 水泳 すいえい 游泳 ゴルフ 高尔夫球 運転 うんてん 开车 飲み物 のみもの 饮料 お酒 おさけ 酒，酒类 肉 にく 肉 野菜 やさい 蔬菜 果物 くだもの 水果 ピーマン 青椒 もやし 豆芽 ヒマワリ 向日葵 バラ 蔷薇，玫瑰 コンピュータ 电脑 窓 まど 窗 結婚式 けっこんしき 结婚典礼 写真展 しゃしんてん 摄影展 旅館 りょかん 旅馆，旅店 別荘 べっそう 别墅 寄木細工 よせぎざいく 木片儿拼花工艺品 模様 もよう 花纹 外国 がいこく 外国 会議 かいぎ 会议 脚 あし 腿 僕 ぼく 我 分かる わかる 懂，明白 迷う まよう 犹豫，难以决定 できる 会；能；完成 閉める 关闭，关门 疲れる つかれる 疲倦，疲惫 散歩し 散步 怖い こわい 害怕，恐怖 赤い あかい 红 痛い いたい 疼，疼痛 上手 じょうず 擅长，高明，水平高 下手 へた 不高明，水平低 苦手 にがて 不擅长，不善于 時々 ときどき 有时，时不时 よく 经常，常常 たまに 偶尔，很少 また 还，再，又 どうして 为什么 だから／ですから 所以，因此 結構です けっこうです 不用，不要 気に入ります きにいります 喜欢，中意 など 等等 スイカ 西瓜 サクランボ 樱桃 ナシ 梨 キュウリ 黄瓜 2. 语法 2.1 【名1】 は 【名2】 が 一类形//二类形 です”好きです” ”嫌いです” “怖いです”等表达感情的形容词可以以“【名词1】 は 【名词2】が 【一类形容词/二类形容词】 です” 的句型使用。“名词1”表示情感的主题，“名词2”表示情感的对象 小野さん は 歌 が 好きではありません。 王さん は 肉 が 嫌いです。 林さん は 犬 が 怖いです。 2.2 【名1】 は 【名2】 が 分かります／できます“分かります” ”できます” ”上手“です” ”下手です” ”苦手です”等有关能力的词语使用“【名1】 は 【名2】 が 【动词】ます//【一类形容词/二类形容词】 です” スミスさん は 韓国語 が 分かります。 私 は コンピュータ が できません。 小野さん は 料理 が 上手です。 2.3 【名】 や 【名】用于列举多项目的两项，相当于汉语的“~呀~什么的”。并且常常和“など”呼应使用。 吉田さん は 時々 中国 や 韓国 行きます。 私 は お店 で 野菜 や 果物 など お 買いました。 2.4 ”/～から” 和 ”＊だから” 【原因、理由】“から”位于陈述原因、理由的小句的句尾。通常是在说明原因、理由之后再陈述结论。 森さんは お酒 が 好きですから，毎日 飲みます。 窓を閉めます，寒いですから。”だから”表示原因、理由的连词，相当于汉语“所以”，独立使用在结果的句子前面。 キムさんは 野菜 が 嫌いです。だから，あまり 野菜を 食べません。 明日は 休みです。ですから，子供と 動物園へ 行きます。 2.5 表示频率的副词“いつも” ”よく” ”全然”等是表示频率的副词，“あまり” ”全然”后面须接否定形式。 私は たまに コンサートへ 行きます。 田中さんは あなり 横浜へは 行きまさん。 2.6 “どうしてですか”相当于汉语中的“为什么”。回答时在谓语后面加”から”。 どうしてですか。 ここで 友達の 結婚式が ありますから。","link":"/2022/12/22/japanese/11/"},{"title":"第13课　机の　上に　本が　三冊　あります","text":"概述：数词和量词的使用。 1.词汇 1.1 课后词汇 假名 释义 荷物 にもつ 包裹 はがき 明信片 切手 きって 邮票 引き出し ひきだし 抽屉 アルバム 相册 タバコ 烟草 漫画 まんが 漫画 ガレージ 车库 修理 しゅうり 修理 居酒屋 いざかや 酒馆 生ビール なま～ 生啤 焼き鳥 やきとり 烤鸡肉串 唐揚げ からあげ 炸鸡，油炸食品 肉じゃが にくじゃが 土豆烧肉 ポーリング 保龄球 髪 かみ 头发 象 ぞう 大象 昼 ひる 白天，中午 ほか 另外 かかる 花费（时间，金钱） 咲きます さきます 花开 泳ぐ およぐ 游泳 遊ぶ あそぶ 玩，玩耍 吸う すう 吸（烟） 切る きる 剪，切，割 だいたい 大约，大概，大体 とりあえず 暂且 ぐらい 多久，多少钱 1.2 数词和量词 ～つ ～人 ～台 ～個 ～本 ～杯 1 ひとつ ひとり いちだい いっこ いっぽん いっぱい 2 ふたつ ふたり にだい にこ にほん にはい 3 みっつ さんにん さんだい さんこ さんぼん さんばい 4 よっつ よにん よんだい よんこ よんほん よんはい 5 いつつ ごにん ごだい ごこ ごほん ごはい 6 むっつ ろくにん ろくだい ろっこ ろっぽん ろっぱい 7 ななつ ななにん ななだい ななこ ななほん ななはい 8 やっつ はちにん はちだい はっこ はっぽん はっぱい 9 ここのつ きゅうにん きゅうだい きゅうこ きゅうほん きゅうはい 10 とお じゅうにん じゅうだい じゅっこ じゅっぽん じゅっぱい 何 いくつ なんにん なんだい なんこ なんぼん なんぱい 1.3 量词使用 量词 适用对象 量词 适用对象 ～人 人 ～本 细长的物品：瓶、铅笔、伞、香蕉 ～台 机械或车辆；电脑 ～杯 茶、咖啡、啤酒 ～枚 薄平物品：纸、盘子、邮票、衬衫 ～匹 小动物：猫，狗、昆虫、鱼 ～冊 书、笔记本 ～頭 大动物：牛、马 ～歳 年龄 ～羽 鸟、兔 ～回 次数 ～番 顺序 ～着 衣服等 ～足 成对的物品：鞋子、袜子等 ～個 立体的物品：鸡蛋，饭团子等 空容器或器皿：箱子、盒子 概念性或抽象的事物：密码等 ～つ 1~9岁的年龄 立体的物品：橘子、帽子 抽象的事物：谜、选项等 2. 语法 2.1【名（时间）】 + 【动词】表示时间数量的词语和动词一起使用时，说明动作、状态的持续时间。这时候表示时间数量的词语后面不能加“に” 李さんは 毎日 七時間 働きます。 森さんは 九時間 寝ます。 2.2【名（时间）】に【名（次数）】+【动词】表示在一定时间内进行若干次动作。 李さんは 一週間に 二回 プールへ 行きます。 この 花は 二年に 一度 咲きます。 2.3【名（场所）】へ【动词】に 行きます／来ます表示移动行为的目的时使用。动词使用“ます”形，去掉“ます”。 午後 郵便局へ 荷物を 出しに 行きます。 李さんは 私の家へ 遊びに 来ました。 2.4【名（数量）】で用于不称重量而以数个的方式售物，数量是“1”时，不加で この ケーキは 三個で 五百円です。 この ケーキは 一個 二百円です。","link":"/2022/12/24/japanese/13/"},{"title":"第3课  ここは　デパート　です","text":"概述：场所表示，价钱的询问 1.词汇 1.1 课后词汇 假名 释义 デパート 百货商店 食堂 しょくどう 食堂 郵便局 ゆうびんきょく 邮局 銀行 ぎんこう 银行 図書館 としょかん 图书馆 マンション 公寓 ホテル 酒店 コンビニ 便利店 喫茶店 きっさてん 咖啡馆 病院 びょういん 医院 本屋 ほんや 书店 レストラン 餐馆，西餐店 ビル 大楼，大厦 建物 たてもの 大楼，建筑物 売り場 うりば 柜台，出售处 トイレ 厕所，盥洗室 入口 いりぐち 入口 事務所 じむしょ 事务所，办事处 受付 うけつけ 接待处 バーゲン会場 バーゲンかいじょう 降价处理大卖场 エスカレーター 自动扶梯 服 ふく 衣服 コート 风衣，大衣 デジカメ 数码相机 国 くに 国，国家 地図 ちず 地图 隣 となり 旁边 周辺 しゅうへん 附近，周边 今日 きょう 今天 ここ 这里，这儿 そこ 那里，那儿 あそこ 那里，那儿 こちら 这儿，这边 そちら 那儿，那边 あちら 那儿，那边 どこ 哪里，哪儿 どちら 哪儿，哪边 あのう 请问，对不起 上海 シャンハイ 上海 東京 とうきょう 东京 いくら 多少钱 1.2 数字(100以上) 100 ひゃく 1,000 せん 10,000 いちまん — — — — — — 200 にひゃく 2,000 にせん 100,000 じゅうまん 300 さんびゃく 3,000 さんぜん 1,000,000 ひゃくまん 400 よんひゃく 4,000 よんせん 10,000,000 いっせんまん 500 ごひゃく 5,000 ごせん 100,000,000 いちおく 600 ろっぴゃく 6,000 ろくせん 9002 きゅうせん に 700 ななひゃく 7,000 ななせん 9020 きゅうせん にじゅう 800 はっぴゃく 8,000 はっせん 9200 きゅうせん にひゃく 900 きゅうひゃく 9,000 きゅうさん 2. 语法 2.1 ここ／そこ／あそこ指示场所时，用“ここ／そこ／あそこ”。所表示的位置关系与“これ／それ／あれ”相同。 ここ は デパート です。 そこ は 図書館 です。 あそこ は 入り口 です。 2.2【名】は【名（场所）】です表示【名词】位于【名词（场所）】 2.3【名】は どこですか。 トイレは どこですか。 あちらです。 あなたの かばんは どこですか。 私の かばん ここです。 2.4【名】も【名】です助词 “も” 基本相当于汉语的“也” 李さんは 中国人 です。 趙さん も 中国人 です。 2.5【名】 は【名】ですか，【名】ですか答案有多种可能，选择疑问句。 林さんは 韓国人 ですか，日本人 ですか，中国人 ですか。 日本人。 2.6【名】 は いくらですか询问价钱时，用“いくら”。 これ は いくら ですか。","link":"/2022/12/16/japanese/3/"},{"title":"第2课 これわ　本です","text":"概述：介绍简单的方位用法，これ、それ、あれ，陈述以及疑问用法 1.词汇 1.1 课后词汇 假名 释义 本 ほん 本 かばん かばん 包 ノート 笔记本，本子 鉛筆 えんぴつ 铅笔 傘 かさ 伞 靴 くつ 鞋 新聞 しんぶん 报纸 雑誌 ざっし 杂志 辞書 じしょ 字典 カメラ 照相机 テレビ 电视机 パソコン 个人电脑 ラジオ 收音机 電話 でんわ 电话 机 つくえ 桌子 椅子 いす 椅子 鍵 かぎ 钥匙 時計 とけい 钟表 手帳 てちょう 日记，记事本 写真 しゃしん 照片 車 くるま 车子 自転車 じてんしゃ 自行车 お土産 おみやげ 礼物 名産品 めいさんひん 特产 シルク 丝绸 ハンカチ 手绢 会社 かいしゃ 公司 方 かた （敬称）位，人 人 ひと 人 家族 かぞく 家人，家属 母 はは （我）母亲 お母さん おかあさん 母亲 これ 这，这个 それ 那，那个 あれ 那，那个 どれ 哪个 何 なん 什么 誰 だれ 谁 何方 どなた 哪位 この 这，这个 その 那，那个 あの 那，那个 どの 哪个 ええ 是 長嶋 ながしま 长岛 ロンドン 伦敦 おいくつ 多大 ～歳 ～さい ~岁 1.2 称呼 称呼 自己的亲属 别人的亲属 祖父/外祖父 祖父 そふ おじいさん 祖母/外祖母 祖母 そぼ おばあさん 父母 両親 りょうしん ご両親 りょうしん 父亲 父 ちち お父さん おとうさん 母亲 母 はは お母さん おかあさん 儿子 息子 むすこ 息子さん むすこさん 女儿 娘 むすめ 娘さん むすめさん お嬢（じょう）さん 兄弟/兄弟姐妹 兄弟 きょうだい ご兄弟 ごきょうだい 哥哥 兄 あに お兄さん おにいさん 姐姐 姉 あね お姉さん おねえさん 弟弟 弟 おとうと 弟さん おとうとさん 妹妹 妹 いもうと 妹さん いもうとさん 伯伯/叔叔/舅舅/姑父 おじ おじさん 伯母/婶婶/姑姑/舅妈 おば おばさん 1.3 数字(100以下) 0 れい ぜろ 10 じゅう 20 にじゅう 1 いち 11 じゅういち 30 さんじゅう 2 に 12 じゅうに 40 よんじゅう 3 さん 13 じゅうさん 50 ごじゅう 4 し/よん 14 じゅうよん 60 ろくじゅう 5 ご 15 じゅうご 70 ななじゅう 6 ろく 16 じゅうろく 80 はちじゅう 7 しち/なな 17 じゅうなな 90 きゅうじゅう 8 はち 18 じゅうはち 100 ひゃく 9 く/きゅう 19 じゅうきゅ 0.1 れいてんいち 2/3 さんぶんのに 2. 语法 2.1これ／それ／あれ は 名 で（1）说话人和听话人相隔一段距离，面对面时： これ：距说话人较近的事物【说话人的范围、领域内的事物】 それ：距听话人较近的事物【听话人的范围、领域内的事物】 あれ：距说话人和听话人都比较远的事物【不属于任何一方范围、领域内的事物】（2）说话人和听话人位于同一位置，面向同一方向时 これ：距说话人、听话人较近的事物 それ：距说话人、听话人较远的事物 あれ：距说话人、听话人更远的事物（3）举例 これ は 本 てす。 それ は かばん です。 あれ は テレビ です。 2.2 誰ですか／何ですか。不知道是什么人时用”だれ”，不知道是什么事物时用“何”询问，分别相当于汉语的“谁”和“什么”。句尾后续助词“か”。 それ は 何 ですか。 おの人 は 誰 ですか。 “何方（どなた）”通常用于对尊长或比自己地位高的人用“どなた何方”询问。 スミスさん は 何方 ですか。 2.3 この／その／あの 名 は 名 です修饰名词时，要用この／その／あの。其位置表示关系与これ／それ／あれ相同。 この カメラは スイスの ですか。 その 自転車は 森さんの です。 あの ノートは 誰の ですか。 2.4 どれ／どのどれ／どの 是在三个以上的事物中，不能确定是哪一个是所用的疑问句。单独使用时，用“どれ”，修饰名词时用“どの” 森さんの かばんは どれ ですか。 長嶋さんの 傘は どれ ですか。 小野さんの 机は どの机 ですか。","link":"/2022/12/14/japanese/2/"},{"title":"第4课  部屋に　机と　いすが　あります","text":"概述：表示事物存在，“~在~”，“~有~” 句式，物品处于的各个方位表示。 1.词汇 1.1 课后词汇 假名 释义 部屋 へや 房间，屋子 庭 にわ 院子 家 いえ 家 居間 いま 起居室 冷蔵庫 れいぞうこ 冰箱 壁 かべ 墙壁 スイッチ 开关 本棚 ほんだな 书架 ベッド 床 猫 ねこ 猫 犬 いぬ 狗 箱 はこ 盒子，箱子 眼鏡 めがね 眼镜 ビデオ 录像机 サッカーボール 足球 ビール 啤酒 ウイスキー 威士忌 子供 こども 孩子 男 おとこ 男 女 おんな 女 生徒 せいと 学生 上 うえ 上 下 した 下 中 なか 里面 外 そと 外面 前 まえ 前面 後ろ うしろ 后面 近く ちかく 附近，近旁 場所 ばしょ 所在地，地方，场所 教室 きょうしつ 教室 会議室 かいぎしつ 会议室 図書室 としょしつ 图书馆 公園 こうえん 公园 花屋 はなや 花店 売店 ばいてん 小卖部，售货亭 駅 えき 电车站，火车站 地下鉄 ちかてつ 地铁 電車 でんしゃ 火车站 バス停 汽车站 新幹線 しんかんせん 新干线 木 き 木 一人暮らし ひとりぐらし 单身生活 あります 有，在 います 有，在 ええと 啊，嗯 横浜 よこはま 横浜 名古屋 なごや 名古屋 1.2 场所 映画館 えいがかん 电影院 美術館 びじゅつかん 美术馆 体育館 たいいくかん 体育馆 博物館 はくぶつかん 博物馆 図書館 としょかん 图书馆 動物園 どうぶつえん 动物园 遊園地 ゆうえんち 游乐园 駅 えき 车站 空港 くうこう 机场 市役所 しやくしょ 市政所 消防署 しょうぼうしょ 消防局 警察署 けいさつしょ 警察局 交番 こうばん 派出所 病院 びょういん 医院 工場 こうじょう 工厂 劇場 げきじょう 剧场 駐車場 ちゅうしゃじょう 停车场 学校 がっこう 学校 お店 おみせ 商店，小店 八百屋 やおや 蔬菜店 肉屋 にくや 肉店 魚屋 さかなや 鱼店 蕎麦屋 そばや 荞麦面店 床屋 とこや 理发店 薬局 やっきょく 药店 喫茶店 きっさてん 咖啡店 スーパー 超市 ガソリンスタンド 加油站 2. 语法 2.1 ”あります” 和 ”います“表示事物存在时，最常用的谓语是”あります” 和 ”います“。”あります” 用于花、草、桌子等不具有意志的事物。”います“用于具有意志的 人、动物或者昆虫。（1）表示存在，相当于汉语的“~有~” 部屋 に 机 があります。 庭 に 何 がありますか。 公園 に 子供 がいます。 （2）表示位置，相当于“在” 椅子 は 部屋 に あります。 図書館 は どこ に ありますか。 犬 は どに に いますか。 2.2【名】と【名】并列助词“と”加在两个名词之间表示并列，意思相当于汉语的“和” 時計 と 眼鏡 ビールー と ウイスキー 2.3 上／下／前／後ろ／隣／中／外 机 の 上 に 猫 がいます。 会社 の 隣 に 花屋 があります。 売店 は 駅 の 外 に あります。 2.4 疑问词 + も + 动词（否定）表示全面的否定 教室 に 誰 も いません。 冷蔵庫 に 何 も ありません。","link":"/2022/12/16/japanese/4/"},{"title":"第5课　森さんは　7時に　起きます","text":"概述：时间的表示方式，与动词的一些时态表示。 1.词汇 1.1 课后词汇 假名 释义 今 いま 现在 先週 せんしゅう 上个星期 来週 らいしゅう 下个星期 再来週 さらいしゅう 下下个星期 今週 こんしゅう 这个星期 昨日 きのう 昨天 明日 あした 明天 明後日 あさって 后天 一昨日 おととい 前天 毎日 まいにち 每天 毎朝 まいあさ 每天早上 毎晩 まいばん 每天晚上 毎週 まいしゅう 每周 午前 ごぜん 上午 午後 ごご 下午 今朝 けさ 今天早上 今晩 こんばん 今天晚上 来年 らいねん 明年 去年 きょねん 去年 夜 よる 夜里，晚上 晩 ばん 晚上 朝 あさ 早晨 学校 がっこう 学校 試験 しけん 考试 仕事 しごと 工作 遅刻 ちこく 迟到 休み やすみ 休息 出張 しゅっちょう 出差 研修 けんしゅう 进修 旅行 りょこう 旅行 展覧会 てんらんかい 展览会 歓迎会 かんげいかい 欢迎会 パーティー 联欢会 お宅 おたく 您家 休みます やすみます 休息 働きます 働く はたらきます 工作 始まります 始まる はじまります 开始 終わります 終わる おわります 结束 起きます 起きる おきます 起床 寝ます 寝る ねます 睡觉 勉強します 勉強する べんきょうします 学习 いつも 总是 神戸 こうべ 神户 ～時 ～分 ～半 ～月 ～日 ～年 ～ごろ 1.2 星期 日曜日 月曜日 火曜日 水曜日 木曜日 金曜日 土曜日 にちようび げつようび かようび すいようび もくようび きんようび どようび 周日 周一 周二 周三 周四 周五 周六 2. 语法 2.1 今 ～時 ～分 です表示现在的时间，具体询问使用“何時”。 今 ４時 です。 今 何時 ですか。 8時半です。 2.2 动词 动词形态 一类动词（五段动词）：以”う”段假名结尾的动词。 常见的一类动词有：行く、置く、使う、作る 二类动词（一段动词）：以“イ”（上一段动词）+ ”る” 或者”え”（下一段动词 ）+ ”る” 嘲（あざけ） 煎（い）る 三类动词：来る する ～する カ变动词 サ变动词 结尾如果不是る → 一定是一类动词 以る结尾,る前是い或え段 → 十有八九是二类动词 する、くる → 三类动词 2.3 ます 形变化“ます”作用 表示尊敬的助动词 与“です”同构成句子的礼貌体 在句中只做谓语，只用于结尾句“ます”型变化 一类动词：基本型最后发音为”う”段；去掉”う”改为同行”い 行くーーーーーーーーーーーー 行きます 二类动词：去掉“る” + ます 起きるーーーーーーーーーーーー 起きます 三类动词： 来（く）るーーーーーーーーーーーー 来（き）ます 勉強するーーーーーーーーーーーー 勉強します 2.4 动词的时态 非过去式（现在、将来） 肯定：动词ます型 否定：动词连用形 + ません 过去时 肯定：动词连用形 + ました 否定：动词连用形 + ませんでした 森さんは 毎日 働きます。 田中さんは 明日 働きません。 森さんは 先週 休みました。 私は 昨日 働きませんでした。 2.5 名 + 时间 に 动词表示动作发生的时间时，要在具体时间词语后面加上助词“に” 森さんは 7時 に 起きます。 学校は 8時半 に 始まります。 2.6 名 时间 から 名 时间 まで 动词从…………到…………，表示动词发生在某个时间段 私は 9時 から 5時 まで 働きます。 森さんは 月曜日 がら 水曜日 まで 休みました。 2.7 いつ 动词ますか（1）询问某动作或事态进行的时间用“いつ” 試験は いつ 始まりますか。 （2）询问具体时间时，在表示时间的词语后面加上“に” 仕事は 何時 に 終わりますか。 （3）可以与“から”与“まで”连用 展覧会は いつから 始まりますか。 張さんは 何曜日まで 休みますか。 火曜日までです。","link":"/2022/12/19/japanese/5/"},{"title":"第6课　吉田さんは　来月　中国へ　いきます","text":"概述：移动动词与场所的搭配，用于场所的助词使用。 1.词汇 1.1 课后词汇 假名 释义 来月 らいげつ 下个月 先月 せんげつ 上个月 夜中 よなか 午夜，半夜 コンサート 音乐会 クリスマス 圣诞节 誕生日 たんじょうび 生日 こどもの日 こどものひ 儿童节 夏休み なつやすみ 暑假 交通機関 こうつうきかん 交通工具 新幹線 しんかんせん 新干线 飛行機 ひこうき 飞机 フェリー 渡轮 電車 でんしゃ 电车 バス 公共汽车 タクシー 出租车 美術館 びじゅつかん 美术馆 アパート 公寓 家 うち 家 プール 游泳池 友達 ともだち 朋友 弟 おとうと 弟弟 行く 行きます いく 去 帰る 帰ります かえる 回来 来る 来ます くる 来 確か たしか 好像是，大概；的确 まっすぐ 径直，笔直 一緒に いっしょに 一起 佐藤 さとう 佐藤 広島 ひろしま 广岛 京都 きょうと 京都 北海道 ほっかいどう 北海道 箱根 はこね 箱根 銀座 ぎんざ 银座 渋谷 しぶや 涩谷 新宿 しんじゅく 新宿 歩いて あるいて 步行 1.2 月份 1月 いちがつ 5月 ごがつ 9月 くがつ 2月 にがつ 6月 ろくがつ 10月 じゅうがつ 3月 さんがつ 7月 しちがつ 11月 じゅういちがつ 4月 しがつ 8月 はちがつ 12月 じゅにがつ 1.3 日历 日曜日 月曜日 火曜日 水曜日 木曜日 金曜日 土曜日 1 2 3 4 5 6 7 ついたち ふつか みっか よっか いつか むいか なのか 8 9 10 11 12 13 14 ようか ここのか とおか じゅういちにち じゅうににち じゅうさんにち じゅうよっか 15 16 17 18 19 20 21 じゅうごにち じゅうろくにち じゅうしちにち じゅうはちにち じゅうくにち はつか にじゅうういちにち 22 23 24 25 26 27 28 にじゅうににち にじゅうさんにち にじゅうよっか にじゅうごにち にじゅうろくにち にじゅうしちにち にじゅうはちにち 29 30 31 にじゅうくにち さんじゅうにち さんじゅういちにち 2. 语法 2.1 名【场所】 ヘ 动词使用“行きます” “帰ります”等表示移动的动词，移动行为的目的地用助词“ヘ”表示，读作”え” 李さん は どこ へ 行きませんでしたか。 2.2 名【场所】 から 动词使用移动动词时，移动的起点用助词“から”表示。 あの方 は どこ から きましたか。 2.3 名【人】 と 动词共同做某事的对象用“と”表示。 李さん は 誰 と 日本 へ 来ましたか。 2.4 名【交通工具】 で 动词交通手段用助词“で”表示。不使用交通工具而步行“歩いて” 上海 まで 飛行機 で 行きます。 京都 へ 何 で 来ましたか。 李さん は 歩いて アパート へ 帰りま。 2.5 名【场所】から 名【场所】まで 动词表示移动的范围时，范围的起点用“から”，终点用“まで” 森さんは 駅 から アパート まで 歩いて 帰りました。 2.6 に／で／へ／から／まで／と ＋ は助词“は”表示对比的意思。 わたしの部屋 に は 電話が ありません。 韓国 へ は 行きました。中国 へ は 行きませんでした。","link":"/2022/12/19/japanese/6/"},{"title":"第7课　李さんは　毎日　コーヒーを　飲みます","text":"概述：移动动词与场所的搭配，用于场所的助词使用。 1.词汇 1.1 课后词汇 假名 释义 コーヒー 咖啡 コーラ 可乐 お茶 おちゃ 茶 ワイン 葡萄酒 パン 面包 ケーキ 蛋糕 お粥 おかゆ 粥 昼ご飯 ひるごはん 午饭 お弁当 おべんとう 盒饭 そば そば 荞麦面 うどん 面条 親子丼 おやこどん 鸡肉鸡蛋盖饭 カレイ 咖喱 卵 たまご 鸡蛋 チーズ 干酪 リンゴ 苹果 イチゴ 草莓 蕎麦屋 そばや 荞麦面店 テニス 网球 ジョギング 慢跑 サッカー 足球 野球 やきゅう 棒球 申込書 もうしこみしょ 申请书 手紙 てがみ 信 音楽 おんがく 音乐 映画 えいが 电影 動物園 どうぶつえん 动物园 パンダ 熊猫 飲む 飲みます のむ 喝 買う 買います かう 买 撮る 撮ります とる 拍照 書く 書きます かく 写 読む 読みます よむ 读 聞く 聞きます きく 听 食べる 食べます たべる 吃 見る 見ます みる 看 しする します 干，做 掃除する 掃除します そうじする 打扫 これから 今后，从现在起 じゃあ／でわ 那么 午前中 ごぜんちゅう 上午 2. 语法 2.1 名 を 动词动作的对象用助词“を”表示 李さん は 毎日 コーヒー を 飲みます。 李さんは 毎朝 何 を 食べますか。 2.2 名【场所】 で 动词动作的场所用助词“で”表示。所在的场所和动作进行的场所在汉语里都用“在”表示，但是前者为“に” 后者为 “で” 李さんは 図書館 で 勉強します。 今日 どこ で 新聞 を 読みますか。 2.3 名 か 名对若干名词进行选择时，名词和名词之间加“か”，相当于“或者” 私 は 毎朝 パン か お粥 を 食べます。 休み は 月曜日 か 火曜日です。 2.4 名 を ください买东西或者在餐厅点菜时，用~ を ください。 コーラ と ケーキ を ください。 この本 を ください。","link":"/2022/12/19/japanese/7/"},{"title":"第9课　四川料理は　辛いです","text":"概述：一类形容词的变形和使用方式。 1.词汇 1.1 课后词汇 假名 释义 料理 りょうり 菜肴、饭菜 四川料理 しせんりょうり 四川菜 スープ 汤 北京ダック 北京烤鸭 食べ物 たべもの 食物，食品 すき焼き すきやき 日式牛肉火锅 温泉 おんせん 温泉 お湯 おゆ 热水，开水 水 みず 水，凉水 浴衣 ゆかた 浴衣，夏季和服 眺め ながめ 景色，风景 薬 くすり 药 天気 てんき 天气 海 うみ 海 山 やま 山 紙 かみ 纸 ニュース 新闻 女性 じょせい 女性 男性 だんせい 男性 お客様 おきゃくさま 来宾 グラス 玻璃杯 歌舞伎 かぶき 歌舞伎 気持ち きもち 心情 たくさん 很多 辛い からい 辣 甘い あまい 甜 塩辛い／しょっぱい しおからい 咸 酸っぱい すっぱい 酸 苦い にがい 苦 おいしい 好吃，可口 うまい／うめえ 好吃，可口 まずい まずい 不好吃，难吃 熱い あつい 热，烫 冷たい つめたい 凉 楽しい たのしい 愉快，快乐 おもしろい おもしろい 有趣，有意思 つまらない つまらない 无聊 広い ひろい 广阔，宽敞 狭い せまい 狭窄 大きい おおきい 大 小さい ちいさい 小 忙しい いそがしい 忙，忙碌 いい 好 悪い わるい 不好，坏 すばらしい 极好，绝佳 遠い とおい 远 近い ちかい 近 高い たかい 高，贵 低い ひくい 低 安い やすい 便宜 寒い さむい 寒冷 涼しい すずしい 凉爽的 暑い あつい （天气）热 青い あおい 蓝色的 白い しろい 白色的 赤い あかい 红色的 黄色い きいろい 黄色的 黒い くろい 黑色的 難しい むずかしい 难 易しい やさしい 简单 優しい やさしい 温柔，温和 多い おおい 多 少ない すくない 少 かわいい 可爱 本当に ほんとうに 真的，实在是 あまり 不太，很 とても／たいへん 很，非常 少し／ちょっと 一点儿 全然 ぜんぜん 根本（不），全然（不） ちょうど 正好，恰好 天安門 てんあんもん 天安门 万里の長城 ばんりのちょうじょう 万里长城 気持ちがいい きもちがいい 感觉舒服，心情愉快 2. 语法 2.1 今 ～時 ～分 です表示现在的时间，具体询问使用“何時”。 今 ４時 です。 今 何時 ですか。 8時半です。 2.2 动词 动词形态 一类动词（五段动词）：以”う”段假名结尾的动词。 常见的一类动词有：行く、置く、使う、作る 二类动词（一段动词）：以“イ”（上一段动词）+ ”る” 或者”え”（下一段动词 ）+ ”る” 嘲（あざけ） 煎（い）る 三类动词：来る する ～する カ变动词 サ变动词 结尾如果不是る → 一定是一类动词 以る结尾,る前是い或え段 → 十有八九是二类动词 する、くる → 三类动词 2.3 ます 行变化“ます”作用 表示尊敬的助动词 与“です”同构成句子的礼貌体 在句中只做谓语，只用于结尾句“ます”型变化 一类动词：基本型最后发音为”う”段；去掉”う”改为同行”い 行くーーーーーーーーーーーー 行きます 二类动词：去掉“る” + ます 起きるーーーーーーーーーーーー 起きます 三类动词： 来（く）るーーーーーーーーーーーー 来（き）ます 勉強するーーーーーーーーーーーー 勉強します 2.4 动词的时态 非过去式（现在、将来） 肯定：动词ます型 否定：动词连用形 + ません 过去时 肯定：动词连用形 + ました 否定：动词连用形 + ませんでした 森さんは 毎日 働きます。 田中さんは 明日 働きません。 森さんは 先週 休みました。 私は 昨日 働きませんでした。 2.5 名 + 时间 に 动词表示动作发生的时间时，要在具体时间词语后面加上助词“に” 森さんは 7時 に 起きます。 学校は 8時半 に 始まります。 2.6 名 时间 から 名 时间 まで 动词从…………到…………，表示动词发生在某个时间段 私は 9時 から 5時 まで 働きます。 森さんは 月曜日 がら 水曜日 まで 休みました。 2.7 いつ 动词ますか（1）询问某动作或事态进行的时间用“いつ” 試験は いつ 始まりますか。（2）询问具体时间时，在表示时间的词语后面加上“に” 仕事は 何時 に 終わりますか。（3）可以与“から”与“まで”连用 展覧会は いつから 始まりますか。 張さんは 何曜日まで 休みますか。 火曜日までです。","link":"/2022/12/19/japanese/9/"},{"title":"第8课　李さんは　日本語で　手紙を　書きます","text":"概述：表示手段与材料的名词与动词的搭配，物品的收受动词关系。 1.词汇 1.1 课后词汇 假名 释义 プレゼント 礼物 チケット 票 パンフレット 小册子 記念品 きねんひん 纪念品 スケジュール表 スケジュールひょう 日程表 写真集 しゃしんしゅう 影集 花 はな 花 お金 おかね 钱 バールペン 圆珠笔 宿題 しゅくだい 作业 航空便 こうくうび 航空邮件 速達 そくたつ 快件 ファックス 传真 メール 邮件 電話番号 でんわばんごう 电话号码 住所 じゅうしょ 住址 名前 なまえ 姓名 件 けん 事件 新聞紙 しんぶんし 报纸 紙飛行機 かみひこうき 纸飞机 チョコレート 巧克力 アイスクリーム 冰激凌 小麦粉 こむぎこ 面粉 はし はし 筷子 スプーン 勺子 お兄さん おにいさん 哥哥 夕方 ゆうがた 傍晚 昼休み ひるやすみ 午休 もらう もらいます もらう 拿到 会う 会います あう 见 送る 送ります おくる 寄 作る 作ります つくる 做，制造 太る 太ります ふとる 胖 出す 出します だす 寄 届く 届きます とどく 收到，送到，寄到 画く 画きます かく 画 貸す 貸します かす 借出 習う 習います ならう 学习 あげる あげます 给 かける かけます 打电话 借りる 借ります かりる 向别人借 教える 教えます おしえる 教 もう 已经 さっき 刚才 たった今 たったいま 刚刚 もう一度 もういちど 再一次 前に まえに 以前 2. 语法 2.1 名【工具】 で 动词で 表示手段以及原材料 李さん 日本語 で 手紙 を 書きます。 何 で うどん を 作りますか。 2.1 名１【人】 は 名2【人】 名3【物】 を あげます“あげます”相当于汉语的“给”，通常在物品以“第一人称→第二人称→第三人称”或者“第三人称→第三人称”的形式移动时使用。物品用助词“を”，接受者用“に” 私 は 小野さん に お土産 を あげます。 小野さん は 森さん に チョコレート を あげます。 弟 は 小野さん に 花 を あげました。 2.2 名１【人】 は 名2【人】 名3【物】 を もらいます“まらいます”相当于“得到”，接受通常在物品以“第三人称→第二人称→第一人称”或者“第三人称→第三人称”的形式移动时使用。物品用助词“を”，赠送者用“に”或者“から”表示 私 は 小野さん に 辞書 を もらいます。 森さん は 長嶋さん に 写真 を もらいました。 母 は 小野さん に ハンカチ を もらいました。 2.3 名【人】 に 会います“会います”相当于汉语“见“。所见到的对象用助词”に“表示 李さん は 明日 長嶋さん に 会います。 私 は 駅 で 森さん に 会いました。 2.4 もう表示完了。相当于汉语“已经” 昼ご飯 を 食べましたか。 ええ、もう 食べました。","link":"/2022/12/19/japanese/8/"},{"title":"第15课　小野さんは　今　新聞を　読んで　います","text":"概述：动词的正在进行时态。动词的许可与禁止。 1.词汇 1.1 课后词汇 假名 释义 ボート 小船，小艇 ベンチ 长椅 市役所 しやくしょ 市政府 携帯電話 けいたいでんわ 手机 禁煙 きんえん 禁止吸烟 風邪 かぜ 感冒 熱 ねつ 发烧，提问 睡眠 すいみん 睡眠 お風呂 おふろ 澡堂，浴室 薬局 やっきょく 药店 クーラー 空调 火 ひ 火 気 き 精神，意识 打ち合わせ うちあわせ 事先商量，洽谈 無理 むり 勉强，难以办到 駐車禁止 ちゅうしゃきんし 禁止停车 立入禁止 たちいりきんし 禁止进入 火気厳禁 かきげんきん 严禁烟火 撮影禁止 さつえいきんし 禁止拍照 乗る のる 乘坐，乘 使う つかう 用，使用 座る すわる 坐，落座 入る はいる 进入，加入 申す もうす 是，说，讲，告诉 とる 取，取得 歌う うたう 唱，唱歌 伝える つたえる 说，传达，转告 止める とめる 停，制止 温かい あたたかい 温暖，热乎 大丈夫 だいじょうぶ 没关系，放心 だめ 不行，不可以 十分 じゅうぶん 好好地，充足地 もちろん 当然，不用说 ゆっくり 好好地，安静地 もしもし 喂 お大事に おだいじに 请多保重 いけません 不行，不可以 かまいません 没关系，不要紧 まだです 还没有。仍然..没有 気を付けます きをつけます 注意 無理をします むりをします 勉强 睡眠をとります すいみんをとります 睡觉 お風呂に入ります おふろにはいります 洗澡 シャワーを浴びます シャワーをあびます 淋雨 2. 语法 2.1【动】て います 「正在进行」表示动作或变化正在进行时，使用“动词て + います” 小野さんは 今 新聞を 読んで います。 太郎さんは コーヒーを 飲んで います。 2.2【动】ても いいです表示许可时，使用“动词て + も + いいです” 家で 仕事を しても いいです。 ここで 写真を 撮っても いいですか。 いいですよ 2.3【动】では いけません表示禁止时，使用“动词て + は + いけません” 飛行機の 中で タバコを 吸っては いけません。 この 部屋に 入っては いけませんか。 はい，入っては いけません。 いいえ，入っても いいです。 2.4【名 附着点】に 【动】表示人或物体的附着点，即人或物体停留在交通工具或椅子上等时，附着点用助词“に”。 小野さんは 公園で ボート に 乗りました。 この いす に 座って ください。 2.5【名 目的地】に 【动】移动行为的目的地既可以用“へ”表示，也可以用“に”表示。 李さんは 病院 に 行きます。","link":"/2023/01/03/japanese/15/"},{"title":"第14课　机の　上に　本が　三冊　あります","text":"概述：数词和量词的使用。 1.词汇 1.1 课后词汇 假名 释义 船便 ふなびん 海运 書類 しょるい 文件，文稿 原稿 げんこう 稿子，原稿 記事 きじ 报道 メモ 记录 駅前 えきまえ 车站一带 橋 はし 桥，桥梁 角 かど 拐角 横断歩道 おうだんほどう 人行横道 右 みぎ 右 左 ひだり 左 交差点 こうさてん 十字路口 道 みち 路，道路 ドア 门 電気 でんき 电，电力 太極拳 たいきょくけん 太极拳 朝ご飯 あさごはん 早饭 晩ご飯 ばんごはん 晚饭 バーベキュー 烧烤 通る とおる 通过，经过 急ぐ いそぐ 急，匆忙 飛ぶ とぶ 飞，飞行 死ぬ しぬ 死亡 待つ まつ 等待，等候 売る うる 卖，销售 話する はなする 说话 渡る わたる 过桥，过河，穿马路 卸します おろします 取，卸货 選ぶ えらぶ 挑选，选择 消します けします 关灯，消除，去除 歩く あるく 步行 曲がる まがる 拐弯，曲折 洗う あらう 洗，洗涤 出る でる 离开 出かける でかける 外出，出门 開ける あける 开，打开，开启 過ぎる すぎる 过 見せる みせる 给~看 つける 开灯 降りる おりる 下车，下山 買い物します かいものします 买东西 卒業します そつぎょうします 毕业 食事します しょくじします 吃饭，用餐 整理します せいりします 整理~ コビーします 复印 暗い くらい 黑暗 大変 たいへん 够受的，不得了 なかなか 相当，很，非常 こう 这样，如此 そう／ああ 那样 後で 过会儿 それから 然后，另外 すみませんが 对不起…… 劳驾 1.2 数词和量词 ～つ ～人 ～台 ～個 ～本 ～杯 1 ひとつ ひとり いちだい いっこ いっぽん いっぱい 2 ふたつ ふたり にだい にこ にほん にはい 3 みっつ さんにん さんだい さんこ さんぼん さんばい 4 よっつ よにん よんだい よんこ よんほん よんはい 5 いつつ ごにん ごだい ごこ ごほん ごはい 6 むっつ ろくにん ろくだい ろっこ ろっぽん ろっぱい 7 ななつ ななにん ななだい ななこ ななほん ななはい 8 やっつ はちにん はちだい はっこ はっぽん はっぱい 9 ここのつ きゅうにん きゅうだい きゅうこ きゅうほん きゅうはい 10 とお じゅうにん じゅうだい じゅっこ じゅっぽん じゅっぱい 何 いくつ なんにん なんだい なんこ なんぼん なんぱい 1.3 量词使用 量词 适用对象 量词 适用对象 ～人 人 ～本 细长的物品：瓶、铅笔、伞、香蕉 ～台 机械或车辆；电脑 ～杯 茶、咖啡、啤酒 ～枚 薄平物品：纸、盘子、邮票、衬衫 ～匹 小动物：猫，狗、昆虫、鱼 ～冊 书、笔记本 ～頭 大动物：牛、马 ～歳 年龄 ～羽 鸟、兔 ～回 次数 ～番 顺序 ～着 衣服等 ～足 成对的物品：鞋子、袜子等 ～個 立体的物品：鸡蛋，饭团子等 空容器或器皿：箱子、盒子 概念性或抽象的事物：密码等 ～つ 1~9岁的年龄 立体的物品：橘子、帽子 抽象的事物：谜、选项等 2. 语法 2.1【名（时间）】 + 【动词】表示时间数量的词语和动词一起使用时，说明动作、状态的持续时间。这时候表示时间数量的词语后面不能加“に” 李さんは 毎日 七時間 働きます。 森さんは 九時間 寝ます。 2.2【名（时间）】に【名（次数）】+【动词】表示在一定时间内进行若干次动作。 李さんは 一週間に 二回 プールへ 行きます。 この 花は 二年に 一度 咲きます。 2.3【名（场所）】へ【动词】に 行きます／来ます表示移动行为的目的时使用。动词使用“ます”形，去掉“ます”。 午後 郵便局へ 荷物を 出しに 行きます。 李さんは 私の家へ 遊びに 来ました。 2.4【名（数量）】で用于不称重量而以数个的方式售物，数量是“1”时，不加で この ケーキは 三個で 五百円です。 この ケーキは 一個 二百円です。","link":"/2022/12/25/japanese/14/"},{"title":"第16课　ホテルの　部屋は　広くて　明るいです","text":"概述：两个以上一类、二类形容词连用，动词结果状态。 1.词汇 1.1 课后词汇 假名 释义 操作 そうさ 操作，操纵 機械 きかい 机械，机器 旅行会社 りょこうがいしゃ 旅行社 航空会社 こうくうがいしゃ 航空公司 営業部 えいぎょうぶ 营业部 企画部 きかくぶ 企划部 開発部 かいはつぶ 开发部 IT産業 アイティー産業 IT产业 工業 こうぎょう 工业 商業 しょうぎょう 商业 製品 せいひん 产品 建築家 けんちくか 建筑师 設計 せっけい 设计 デザイン 设计图 形 かたち 造型，形状，形式 最新 さいしん 最新 ネクタイ 领带 財布 さいふ 钱包 革 かわ 皮革 布 ぬの 布匹 水筒 すいとう 水壶 緑 みどり 绿色 足 あし 脚 指 ゆび 手指 目 め 眼睛 鼻 はな 鼻子 顔 かお 脸 頭 あたま 头，头脑 アイディーカード 身份证 間違い まちがい 错误，失误 問題 もんだい 问题 広告 こうこく 广告 看板 かんばん 牌子 展示場 てんじじょう 展览会场 入場料 にゅうじょうりょう 门票，入场券 サービス 服务 天井 てんじょう 天棚 警備 けいび 戒备，警备 クリスマスツリー 圣诞树 オーストラリア人 澳大利亚人 皆さん みなさん 大家，诸位 子 こ 孩子 横 よこ 旁边，侧面 持つ もつ 有，拥有 住む すむ 住，居住 知る しる 认知，知道 直す なおす 改，修改 片づける かたづける 收拾，整理 練習する れんしゅうする 练习 結婚する けっこんする 结婚 恋人 こいびと 恋人 安心する あんしんする 安心，放心 明るい あかるい 明亮，开朗 長い ながい 长，长久 短い みじかい 短，短暂 軽い かるい 轻巧，轻松，轻微 優しい やさしい 和蔼，温和 細い ほそい 小，细长，纤细 太い ふとい 粗，胖 黒い くろい 黑，黑色 ユニーク 独特 安全 あんぜん 安全 派手 はで 耀眼，花哨 地味 じみ 质朴，朴素 素朴 そぼく 朴素 厳重 げんじゅう 森严，严格 まじめ 认真，严肃 大切 たいせつ 重要，珍重 複雑 ふくざつ 复杂，繁杂 ちゃんと 好好地，的确 まだ 还，尚 すぐ 马上，立即 ずいぶん 相当，非常，很 頭がいい あたまがいい 脑子好，聪明 2. 语法 2.1【一类型】 て 【一类型】【并列】两个以上的一类形容词并列使用时，使用一类形容词的“て形”。一类形容词的“て形”是将词尾“い”变成“くて”。 ホテルの 部屋は 広くて 明るいです。 この 本は 安くて おもしろいです。 2.2【二类型】 で 【二类型】【并列】两个以上的二类形容词并列使用时，使用二类形容词的“て形”。二类形容词的“て形”是“二类形容词+で”。 この コンピュータの 操作は 簡単で 便利です。 森さんは 親切で 優しいです。 この 公園は 静かで 広いです。 2.3【名1】 で 【名2】【并列】两个以上名词并列使用时，用”【名1】 で 【名2】“的形式 スミスさんは 旅行会社の 社員で，営業部の 部長です。 この 機械は 日中電気の 製品で，中国製です。 2.4【动】て います除了表示正在进行的意义，还可以表示动作结束后的结果状态。 森さんは 車を 持って います。 田中さんを 知って いますか。 車を 持って いますか。 いいえ，持って いません。 2.5【小句】 が 【小句】【转折】表示两个小句的转折关系时，用助词“が ”。相当于“但是，可是” 三か月 パソコンを 勉強しましたが，まだ あまり できません。 この レストランは おいしいですが，ちょっと 高いです。 2.6まだ ＋ 【动 否定】表示还没达到所询问的内容的程度。相当于汉语的“还没有”。 何年ぐらい 日本語を 勉強しましたか。 二年 勉強しました。でも，まだ あまり できません。此外，对用“もう”提问的句子做否定回答时“まだ ~して いません”的表达形式。 小野さんは もう 結婚して いますか。 いいえ、まだ 結婚して いません。","link":"/2023/01/04/japanese/16/"},{"title":"第17课　わたしは　新しい　洋服が　欲しいです","text":"概述：表示意愿动词，建议。 1.词汇 1.1 课后词汇 假名 释义 洋服 ようふく 西服 和服 わふく 和服 背広 せびろ 结婚礼服 セーター 毛衣 ノートパソコン 笔记本电脑 バイク 摩托车 お汁粉 おしるこ 年糕小豆汤 天ぷら てんぷら 天妇罗 初詣 はつもうで 新年后首次参拜 初雪 はつゆき 初雪 初恋 はつこい 初恋 初キス 初吻 健康 けんこう 健康 恋愛 れんあい 恋爱 ドラマ 连续剧 相手 あいて 对象，对方 恋人 こいびと 恋人 先輩 せんぱい 前辈 男性 だんせい 男性 女性 じょせい 女性 外国人 がいこくじん 外国人 夏 なつ 夏天 今年 ことし 今年 始める はじめる 开始 連絡する れんらくする 联系 欲しい ほしい 想要 立派 りっぱ 美观，杰出 今度 こんど 下次；这回 ぜひ 一定 そろそろ 快要 まず 先，首先 ベートーベン 贝多芬 ショパン 肖邦 故宮 こきゅう 故宫 ヨーロッパ 欧洲 香港 ホンコン 香港 スイス 瑞士 ～中に じゅうに ~中 2. 语法 2.1【名】が 欲しいです表示愿望时，使用“【名词1】は 【名词2】が 欲しいです”这一表达形式。“名词1”是愿望的主题，“名词2”表示愿望的对象。 私は 新しい 洋服が 欲しいです。 何が 欲しいですか。 新しい パソコンが 欲しいです。 2.2【名】を 【动】たいです表达相当于汉语“想~”的意思，“名词1”是愿望的主体，“名词2”表示希望进行动作的对象。“たい”前接动词“ます形”去掉“ます”的形式。 私は 映画を 見たいです。 今日は お酒を 飲みたくないです。 あなたは 何を したいですか。 何も したく ありません。 2.3【动】ませんか动词的否定形式“~ませんか”加上表示疑问的“か”，表面上是一种疑问形式，语法功能表示提议。 いっしょに お茶を 飲みませんか。 少し 休みませんか。 2.4【动】ましょう把动词“ます形”的“ます”换成“ましょう”，可表示提议。 そろそろ 行きましょう。 2.5 疑问词 + でも表示在任何情况下事态都相同。 李さん，何を 食べたいですか。 何でも いいです。 いつでも 電話を してください。 2.6 ね 缓和语气 日本料理で 何が いちばん 好きですか。 そうですね。やっぱり お寿司ですね。 2.7【～中】与【～中に】未来某一特定时间的名词 + 中に表示该期间结束之前（1）「～じゅうに」：今日 明日 今年 今年中に日本へ旅行に行きたいです。（2）「～ちゅうに」：来週 来月 来週中にレポートを出してください。","link":"/2023/01/05/japanese/17/"},{"title":"第18课　携帯電話は　とても　小さく　なりました","text":"概述：形容词-&gt;自动词（变化的结果）。比较两个以上事物的性质。 1.词汇 1.1 课后词汇 假名 释义 音 おと 声音 物体 声 こえ 声音 人和动物 空気 くうき 空气 息子 むすこ 儿子 娘 むすめ 女儿 医者 いしゃ 医生 お嬢さん おじょうさん 令爱 社会人 しゃかいじん 社会的一员，成人 旅行ガイド りょこうガイド 旅行导游 学者 がくしゃ 学者 パイロット 飞行员 デザイナー 设计者 タイムサービス 时段廉价销售 新春セール しんしゅんセール 新年大甩卖 三割引き さんわりびき 七折 定価 ていか 定价 半額 はんがく 半价 値段 ねだん 价格 シャツ 衬衫 スカート 裙子 色 いろ 颜色 赤 あか 红色 青 あお 蓝色 お正月 おしょうがつ 过年，新年 時間 じかん 时间 将来 しょうらい 将来 準備 じゅんび 准备 病気 びょうき 疾病 なります 变，当 開く あく 开 似合う にあう 适合，相称 うるさい 闹，使人心烦 シンプル 单纯，简洁 間もなく まもなく 马上，一会儿 もうすぐ 马上 さらに／もっと 更加，更 できるだけ 尽量，尽可能 まとめて 一下子，一起，汇总 今から いまから 从现在起 2. 语法 2.1【一类形】なります可以用“一类形+なります”的形式来表示性质或状态的变化。其构成方式是把一类形容词的词尾“い”变成“く”，再加“なります” だんだん 暖かく なります。 パソコンは 安く なりました。 髪お 短くしてください。 2.2【一类形】します“一类形+します”引起事物发生变化的场合 使……变成，使其发生变化。 テレビの 音を 大きく します。 ジュースを 冷たく します。 2.3【二类形】/【名】に なります二类形容词与名词表示性质或状态的变化。 もう 元気に なりました。 息子は 医者に なりました。 2.4【二类形】/【名】に します“二类形容词与名词+します”引起事物发生变化的场合 使……变成，使其发生变化。 部屋を きれいに してください。 会議室を 禁煙に します。 2.5【一类形/二类形】ほうが いいです表示两个以上事物的性质，认为一个比较好时，可以用“一类形 + ほうが いいです”“二类形+な+ほうが いいです”，表示自己的选择或向别人提议 旅行の 荷物は 軽い ほうがいいです。 子供は 元気な ほんがいいです。 公園は 静かな ほうがいいです。","link":"/2023/01/06/japanese/18/"},{"title":"第19课　部屋の　かぎを　忘れないで　ください","text":"概述：动词”ない形”。动词的假设肯定使用方式。 1.词汇 1.1 课后词汇 假名 释义 品物 しなもの 物品，商品 紹介 しょうかい 介绍 物事 ものごと 事物 初級 しょきゅう 初级 中級 ちゅうきゅう 中级 上級 じょうきゅう 上级 初心者 しょしんしゃ 初学者 上級者 じょうきゅうしゃ 熟练者 高級 こうきゅう 高级 高級クラス こうきゅうクラス 高级班 英会話 えいかいわ 英语会话 コース 路线，滑道 スキー 滑雪 レポート 报告 パスポート 护照 喉 のど 喉咙 触る さわる 碰，触 脱ぐ ぬぐ 脱 転ぶ ころぶ 摔，摔倒 渇く かわく 渴 治る なおる 痊愈，医好 滑る すべる 滑行 呼ぶ よぶ 呼喊 返す かえす 归还 手伝う てつだう 帮忙 運ぶ はこぶ 搬运 なくす 丢失 落とす おとす 他动词 使落下 落ちる おちる 自动词 落下 置く おく 放置 払う はらう 支付 立つ たつ 站 忘れする わすれ 忘记 慌てする あわて 慌张 捨てする すて 扔，扔掉 残業する ざんぎょう 加班 心配する しんぱい 担心 本当 ほんとう 真的，真正 早く はやく 早点儿 やっと 好不容易，终于 だいぶ 很，相当 初めて 第一次 先に さきに 先 2. 语法 2.1 动词 ない 形动作否定简体变形。 一类动词：把“ます形”去掉“ます”后的最后一个音变成相应的“あ段”音，后加“ない”，如果最后音为“い”，把“い”变成“わ”后加“ない” 也可以表示为动词原形把“う”段假名变成同行中″あ”段 + ない” う く ぐ す つ ぬ ぶ む る 買う 書く 急ぐ 話す 立つ 死ぬ 呼ぶ 休む 売る 買わない 書かない 急がない 話さない 立たない 死なない 呼ばない 休まない 売らない 二类动词：把“ます形”去掉“ます”加“ない”。 食べる 食べない 見る 見ない 三类动词：来（き）ます—&gt;来（こ）ない します—&gt;しない 来ます 来ない します しない 2.2【动词】ないで ください表示否定请求的命令。 部屋の かぎを 忘れないで ください。 無理を しないで ください。 この 部屋には 入らないで ください。 2.3【动词】なければ なりません假定形：必须、不得不，客观上必须做，相当于”have to”。接续方法是将动词”ない形”中的“ない”换成“なければ なりません”，也可以换成“ないと いけません”。 李さんは 今日 早く 帰ら なければ なりません。 この 薬は 毎日 飲ま なければ なりません。 すぐに 書類を 送ら ないと いけません。 2.4【动词】なくても いいです表示不做某事也可以。相当于“なければ なりません”的否定。将“ない形”中的“ない”替换为“なくても いいです” 明日は 残業し なくても いいです。 慌て なくても いいです。 靴を 脱が なくても いいです。 2.5【名1】が 【名2】です1.“名词1”是新信息，“名词2”是旧信息。新信息做主语时用“が”来表示。 山田先生は どの 方ですか。 あの 方が 山田先生です。 吉田課長は いますか。 私が 吉田ですが………。 あなたの かばんは どれですか。 これが 私の かばんです。2.叙述直接观察到的某事物，而不是作为话题在谈论这个事物时，使用该形式。 子供が 公園で 遊んで います。 バスが 来ました。3.”何” ”誰” ”どこ” ”いつ”等表示疑问的词做主语时不能用“は”，只能用“が” 誰が いますか。 どこが 痛いですか。 何が 好きですか。","link":"/2023/01/07/japanese/19/"},{"title":"第20课　スムスさんは　ピアノを　弾く　にとが　できます","text":"概述：动词的基本形使用，前文已赘述其变形方法。 1.词汇 1.1 课后词汇 假名 释义 趣味 しゅみ 爱好 特技 とくぎ 特长 夢 ゆめ 梦，理想 ギター 吉他 胡弓 こきゅう 胡琴 書道 しょどう 书法 釣り つり 钓鱼 ドライブ 兜风，开车远游 編み物 あみもの 编织品；编制 手作り てづくり 手工做 中華街 ちゅうかがい 中华街 中華料理 ちゅうかりょうり 中国菜 ギョーザ 饺子 皮 かわ 皮 春節 しゅんせつ 春节 獅子舞 ししまい 狮子舞 寮 りょう 宿舍 洗濯機 せんたくき 洗衣机 シャワー 淋浴 饅頭 まんじゅう 馒头 おなか 肚子 授業 じゅぎょう 授课，上课 資料 しりょう 资料 小説 しょうせつ 小说 海岸 かいがん 海岸 冬休み ふゆやすみ 寒假 キャンプ 野营 みんな 大家 自分 じぶん 自己 全員 ぜんいん 全员 弾く ひく 弹 すく 肚子 饿，空 腹減った はらへった 肚子饿 上る のぼる 登，上 集める あつめる 收集 浴びる あびる 淋，浇 ごちそうする 请客 帰国する きこくする 回国 特に とくに 特别 おなかがすきます 肚子饿 2. 语法 2.1【名 人】は 【动词基本形】ことが できます动词基本形 + ことが できます 表示能力，肯定情况下可以单用“できます”，否定情况下可以单用“できません”。 スミスさん ピアノを 弾く ことが できます。 李さんは 中華料理を 作る できません。 2.2【名】は 【动词基本形】当谓语部分的内容是一种动作，行为时使用这个句型。 私の 趣味は 切手を 集める ことです。 小野さんは 車を 運転する ことが できません。 2.3【动词基本形】／【名词+の】前に，～表示一个动作在另一个动作之前发生。 こちらはへ 来る 前に 電話を かけて ください。 毎日 寝る 前に シャワーを 浴びます。 会議の 前に，資料を コピーします。 2.4 疑问词 + か疑问词“いつ”，”どこ”，”だれ”等词后续“か”，表示“某时”，“某地”，“某人” 部屋に 誰か いますか。 部屋に 誰が いますか。“いつか”，“どこか”，“だれか”，“なにか”等本身不表示疑问的意思，可用于陈述句。 冬休み，どこかへ 行きたいです。 おなかが すきましたね。何か 食べましょう。 2.5 ~よね当说话人对自己的意见想法没有足够的把握时用“よね” 手作りの ギョーザの 皮は おいしいですよね。 この 傘は 森さんのですよね。 小野さんも いっしょに 行きますよね。","link":"/2023/01/08/japanese/20/"},{"title":"第21课　私は　すき焼きを　食べた　ことが　あります","text":"概述：动词的”た”形。叙述过去体验过的事情。提议对方做的事。 1.词汇 1.1 课后词汇 假名 释义 言葉 ことば 语言 メールアドレス 邮件地址 連休 れんきゅう 连休 ゴールデンウイーク 黄金周 終わり おわり 结束 休憩時間 きゅうけいじかん 休息时间 京劇 きょうげき 京剧 切符 きっぷ 票（券） 体 からだ 身体 地震 じしん 地震 泥棒 どろぼう 小偷，盗贼 駐車場 ちゅうしゃじょう 停车场 渡す わたす 交给 遅れる おくれる 迟到 考える かんがえる 考虑 調べる しらべる 调查 着る きる 穿 予約します よやくします 预约 预定 感謝します かんしゃします 感谢 運動します うんどうします 运动 洗濯します せんたくします 洗涤 報告します ほうこくします 报告 危ない あぶない 危险 それとも 还是，或者 そんなに 那么 ～過ぎ すぎ ~过了 ３時過ぎ 超过了3点 40過ぎ 超过了40 2. 语法 2.1 动词た形 1.一类动词（五段动词）。イ——&gt;词尾「く」ー＞いた；词尾「ぐ」ー＞いだ；词尾【ぬ ぶ む】——&gt;んだ う く ぐ す つ ぬ ぶ む る 会う 書く 急ぐ 話す 待つ 死ぬ 飛ぶ 休む 売る 会った 書いた 急いだ 話した 待った 死んだ 飛んだ 休んだ 売った 2.二类动词（一段动词） 原型 变形 食べる 食べた 見る 見た 3.三类动词 原型 变形 来る 来た する した 2.2【动词た形】ことが あります叙述过去体验过的事情。通常用于至少半年以前发生的事情。疑问句一般只问有无某种经历。回答时可重复问句中的部分词语。 私は すき焼きを 食べた ことが あります。 北京へ 行った ことが ありますか。 いいえ，一度も 行った ことが ありません。 2.3【动词た形】後で，～表示一个动作在另一个动作之后发生。这个句型也可以以“名词+の+後で”的形式使用。 会社が 終わった 後で，飲みに 行きます。 映画を 見た 後で，食事を します。 仕事の後で，映画を 見ます。 2.4【动词た形】ほうが いいです本句型用于在两种事物中进行选择时。否定时，使用动词ない形 もっと 野菜を 食べた ほうが いいですよ。 そんなに 慌てない ほうが いいですよ。 ホテルを 予約した ほうが いいですか。 2.5【动词】ましょうか「提议」用于提议对方和自己一起做某事或向对方提议自己为对方做某事。 何か 食べましょうか。 荷物を 持ちましょうか。 はい，お願いします。 窓を 閉めましょうか。 いいえ，閉めないで ください。","link":"/2023/01/09/japanese/21/"},{"title":"第22课　森さんは　毎晩　テレビを　見る","text":"概述：动词、形容词、名词的敬体与简体形式的使用。 1.词汇 1.1 课后词汇 假名 释义 スキー場 すきーじょう 滑雪场 送別会 そうべつかい 欢送会 都合 つごう 方便；情况 予定 よてい 预计，预定 おもちゃ 玩具 火事 かじ 火灾 期間 きかん 时间，期间 転勤 てんきん 调动工作 携帯 けいたい 手机 バドミントン 羽毛球 ラケット 球拍 奥さん おくさん 夫人，（别人的）爱人 主人 しゅじん 歌手 旦那さん だんなさん 丈夫/爱人；先生 歌手 かしゅ 歌手 大統領 だいとうりょう 总统 やる 做 うれしい 高兴（主观） 眠い ねむい 困倦 重い おもい 重，沉重 軽い かるい 轻；轻微 急 きゅう 突然，紧急 まあまあ 大致，还算 あんまり 太，非常，过于 ごめん 抱歉 ～以外／方 いがい／かた 方式（动词连用形+方）动作的方式 2. 语法 2.1 动词的简体形 敬体形 简体形 あります ある ありません ない ありました あった ありませんでした なかった 買います 買う 買いません 買わない 買いました 買った 買いませんでした 買わなかった 森さんは 毎晩 テレビを 見る。 コーヒー，飲む？ ううん，飲まない。 昨日 テレビ，見た？ ううん，見なかった。 2.2 一类形容词谓语形式的简体形 敬体形 简体形 忙しいです 忙しい 忙しくないです 忙しくない 忙しかったです 忙しかったです 忙しくなかったです 忙しくなかったです その カレー，おいしい？ ううん，あんまり おいしく ないよ。 昨日の 試験，どうだった？ ちょっと 難しかった。 2.3 二类形容词谓语形式的简体形 敬体形 简体形 簡単です 簡単だ 簡単ではありません 簡単ではない 簡単でした 簡単だった 簡単ではありませんでした 簡単では なかった この ネクタイ，派手？ ううん，全然 派手じゃないわ。 森さんの アパート，静か？ うん，静かだよ。 2.4 名词谓语形式的简体形 敬体形 简体形 晴れです 晴れだ 晴れではありません 晴れではない 晴れでした 晴れだった 晴れではありませんでした 晴れでは なかった 今日は 曇りだ。 明日は 水曜日だね。 水曜日じゃ ないよ。木曜日だよ。 昨日，スキー場は 雪だった。 ううん，雪じゃ なかったよ。いい天気だった。 2.5【小句】けど【小句】转折，铺垫“けど”连接两个句子，起着把两个句子归纳成一个句子的作用，用于口语转折： 昨日の 試験，どうだった。 ちょっと 難しかったけど，まあまあ できたよ。铺垫： 来週，送別会を するけど，都合は どうかな？","link":"/2023/01/12/japanese/22/"},{"title":"第23课　休みの日，散歩したり　買い物に　行ったり　します","text":"概述：两个动词、形容词、名词连用以及两个句子的连用。 1.词汇 1.1 课后词汇 假名 释义 週末 しゅうまつ 周末 月末 げつまつ 月末 期末 きまつ 期末 年末 ねんまつ 年末 スケート 滑冰，溜冰 味 あじ 口味，味道 毎回 まいかい 每次，没回 通勤 つうきん 上下班，通勤 船 ふね 船 生地 きじ 布料，衣料 閉店時刻 へいてんじこく 关门时间 卒業式 そつぎょうしき 毕业典礼 入学式 にゅうがくしき 入学典礼 成人式 せいじんしき 成人礼 違う ちがう 不同，不一样 込む こむ 拥挤，混杂 口と心が違う くちとこころがちがう 口是心非 決まる きまる 决定 知らせる しらせる 告诉 確かめる たしかめる 查看，弄清 濃い こい 口味重，浓 早い はやい 早 遅い おそい 晚；慢 たぶん 可能，大概 東京駅 とうきょうえき 东京站 ～によって 根据……不同 ～によります 根据……不同 2. 语法 2.1【动】たり【动】たり用于表示列举若干种有代表性的动作时。将动词“た形”中的“た”变为“たり” 小野さんは 休みの日，散歩したり 買い物に 行ったり。 家の 掃除を したり 洗濯を したり します。 2.2【一类形】かったり【一类形】かったりです；【二类形/名词】だったり【二类形/名词】だったりです用于表示状态或状况有多种可能时，其构成方式是将一类形容词、二类形容词和名词的过去简体形的”かった” “だった”中的”た”变成”たり”一类形容词、二类形容词出现的状态一般是反义。 飛行機の チケットは 高かったり 安かったりづす。 この公園は 時間に よって 静かだったり にぎやかだったりです。 日本語の 先生は 中国人だったり 日本人だったりです。 2.3【小句】+ か表示某种不确定的内容。动词/形1 简体；形2/名词简体（だ省略）（1）【小句】+ か どうか将不包含疑问词的疑问句作为一个长句中的一部分时，将动词、一类形容词的敬体形变为简体形，并在后面加上“か どうか”。大主语は；小主语が 私は 今年の夏，北京へ 行く（か どうか）わかりません。 小野さんは 仕事が 終わったか どうか 聞いてください。也可以重复使用动词的“基本形”和“ない形” 私は この 料理が 辛いか 辛くないか 知りません。 私は 今年の 夏，北京へ 行くか 行かないか 分かりません。名词/二类形容词，不加“だ”。“か どうか”小句中的主语后面必须用“が”，不用“は”。 私は キムさんが 中国人か どうか 知りません。 私は キムさんが 中国人か 中国人では ないか 知りません。（2）【疑问词小句】+ か将包含“何”、“だれ”、“どこ”等疑问句，作为一个长句中的一部分使用时，需将疑问词小句的动词、一类形容词的敬体形变为简体形，再加“か” 鍵か どこに あるか 教えて ください。 昨日 何を 食べたか 忘れました。“か”前面出现名词或二类形容词时，“~か どうか”直接接在名词或二类形容词后面，其间不加“だ”。 この 歌が だれの 歌か 知って いますか。","link":"/2023/01/13/japanese/23/"},{"title":"第24课　李さんは　もう　すぐ　来ると　思います","text":"概述：表示说话人思考；转述他人说话的复合句。 1.词汇 1.1 课后词汇 假名 释义 ハイキング 郊游，远足 お別れ おわかれ 分别，分手 見送り みおくり 送行，送别 間 あいだ 时间，期间 法律 ほうりつ 法律 思う おもう 想，思考 言う いう 说，讲 探す さがす 找，寻找 笑う わらう 笑 寝坊する ねぼうする 睡懒觉 外出します がいしゅつします 外出，出去 研究します けんきゅうします 研究 おかしい 可笑，滑稽 おもしろい 精彩的，有趣的 いーぱい 满 すごい／すげい 惊人的，了不起的 とうとう 终于，终究 必ず かならず 一定，必定 絶対に ぜったいに 绝对 馬 ば 马 お世話になりました おせわになりました 承蒙照顾 よろしくお伝えください よろしくおつたえください 请带问好 お元気で おげんきで 请多保重，正常没有生病的人 さようなら 再见 どうやって 怎样，如何 役に立ちます やくにたちます 有用 おなかがいっぱいです 对……有用 ～中／について 关于…… 2. 语法 2.1【小句（简体形）】と 思います表示说话人的思考内容，“~と 思います”前的小句谓语必须是简体形。 李さんは もう すぐ 来る と 思います。 田中さんは 来ない と 思います。 日本は きれいだ と 思います。 馬さんは 日本へ 行きたい と 思っています。 2.2【名（人）】は【小句（简体形）】と 言いました向第三者转述他人所说的话。 陳さんは パーティーに 行く と 言いました。 森さんは 中国語の 試験は 難しかった と 言いました。 小野さんは 李さんに ちょっと 休みたい と 言いました。“~と 思います”及“と 言いました”前面出现名词或二类形容词小句时必须加”だ” 2.3 ～のです／んです表示所讲的内容与前句或前向内容有关联。用于说明状况或解释原因、理由。“～のです／んです”前接简体形，但是名词和二类形容词的现在将来形的肯定形，“だ”要换成“な”。 すみません，頭が 痛いんです。 そうなんですが，やめる ことが できないんです。 あの 歌手は 日本では とても 有名なんです。 2.4 どうして～のです／んです询问理由的完整形式，回答使用2.3的“～のです／んです”形式。 どうして 食べないんですか。 もう おなかが いっぱいなんです。 どうして 遅刻したんですか。 寝坊したんです。 2.5【小句】が，【小句】（铺垫）“が”用来提示接下来要说的内容，多用于书面语。 東京タワーへ 行きたいんですが，どうやって 行きますか。 李さんを 探して いるんですが，どこに いますか。 明日から 連休だけど，どうするか 決めた？","link":"/2023/01/16/japanese/24/"},{"title":"C#中的委托与事件（一）","text":"C#中的委托与事件介绍，使用方式。 1. C#委托委托：存储具有相同参数的方法，与类、接口类似，通常定义在类的外部。也可以定义在类的内部，如果频繁调用，不适合放在内部。 事件：事件属于类的成员，所以放在类的内部。 委托+事件相当于观察者模式，委托类似于观察者，它关心某种事件，一旦这种事件被触发，这个观察者就会行动 2. 委托实现C#中可以通过四种方式实现委托 deletegate 声明委托 1234567891011121314151617public delegate void PrintTool(); // 定义一个类，创建三个需要委托的方法 public class Class1 { private void PrintX() { Console.WriteLine(&quot;x&quot;); } private void PrintY() { Console.WriteLine(&quot;y&quot;); } private void PrintZ() { Console.WriteLine(&quot;z&quot;); } } 初始化委托 1PrintTool printTool; 委托注册事件 1234Class1 cls = new Class1();printTool = cls.PrintX;printTool += cls.PrintY;printTool += cls.PrintZ; 调用 1printTool?.Invoke(); Action Action中的方法可以传参，但不能有返回值 声明委托 1234567891011121314151617public class Class1 { // 声明一个带有一个string入参的委托 public Action&lt;string&gt; _actionPrint; private void PrintX(string str) { Console.WriteLine(&quot;using printX to print : &quot; + str); } private void PrintY(string str) { Console.WriteLine(&quot;using printY to print : &quot; + str); } private void PrintZ(string str) { Console.WriteLine(&quot;using printZ to print : &quot; + str); } } 委托注册事件 12345Class1 cls = new Class1();cls._actionPrint += cls.PrintX;cls._actionPrint += cls.PrintY;cls._actionPrint += cls.PrintZ;cls._actionPrint(&quot;result&quot;); 调用 1cls._actionPrint(&quot;result&quot;); Func Func添加的方法必须有返回值 声明委托 1234567891011121314151617public class Class1 { public Func&lt;string, string, int&gt; _funcCal; // 声明三个计算的方法 private int Sum(string a, string b) { return int.Parse(a) + int.Parse(b); } private int Multi(string a, string b) { return int.Parse(a) * int.Parse(b); } private int Minus(string a, string b) { return int.Parse(a) - int.Parse(b); } } 委托注册事件 1234Class1 cls = new Class1();cls._funcCal += cls.Sum;cls._funcCal += cls.Multi;cls._funcCal += cls.Minus; 调用 1var result = cls._funcCal(&quot;2&quot;, &quot;100&quot;); Lambda 声明Func委托 123Func&lt;string, string, int&gt; _funcCal = (a, b) =&gt; { return int.Parse(a) + int.Parse(b); }; 委托注册 12345678910111213141516171819202122232425public class Class1 { private int Sum(string a, string b) { return int.Parse(a) + int.Parse(b); } private int Multi(string a, string b) { return int.Parse(a) * int.Parse(b); } private int Minus(string a, string b) { return int.Parse(a) - int.Parse(b); } public static void Main() { Class1 cls = new Class1(); Func&lt;string, string, int&gt; _funcCal = (a, b) =&gt; { return int.Parse(a) + int.Parse(b); }; _funcCal += cls.Sum; _funcCal += cls.Multi; _funcCal += cls.Minus; var result = _funcCal(&quot;2&quot;, &quot;100&quot;); Console.WriteLine(result); } } 调用 1var result = _funcCal(&quot;2&quot;, &quot;100&quot;); 3. 举一个在Unity制作游戏中的例子背景：塔防游戏包含两个脚本Tower.cs和Monster.cs。Tower对进入范围内的敌人进行攻击，使用队列将每个进入的怪物存放，离开范围或死亡则移除。死亡时可以使用委托进行怪物的队列移除。 1234567891011121314151617Monster.cspublic class Monster : MonoBehaviour { // 使用Action定义一个委托 public Action&lt;Monster&gt; deathEvent; // 省略一些代码 public void TakeDamage(float damage) { ani.SetTrigger(&quot;Dead&quot;); navMeshAgent.isStopped = true; // 执行委托 deathEvent?.Invoke(this); capsuleCollider.enabled = false; Destroy(gameObject, 0.9f); } } 1234567891011121314151617181920212223242526272829303132333435363738394041Tower.cspublic class Tower : MonoBehaviour { private void Awake() { // 定义进入怪物的列表 monsterList = new List&lt;Monster&gt;(); } private void OnTriggerEnter(Collider other) { // 如果进入的gameObject tag==Monster if (other.tag == &quot;Monster&quot;) { Monster currentMonster = other.GetComponent&lt;Monster&gt;(); monsterList.Add(currentMonster); // 将怪物的死亡事件绑定 currentMonster.deathEvent += RemoveMonsterFromList; } } private void OnTriggerExit(Collider other) { if (other.tag == &quot;Monster&quot;) { Monster currentMonster = other.GetComponent&lt;Monster&gt;(); monsterList.Remove(currentMonster); // 将怪物的死亡事件解除 currentMonster.deathEvent -= RemoveMonsterFromList; } } // 需要注册的方法：将怪物移除队列 public void RemoveMonsterFromList(Monster monster) { if (monsterList.Contains(monster)) { monsterList.Remove(monster); } } }","link":"/2023/02/01/csharp/1/"},{"title":"C#中的委托与事件（二）","text":"C#中的委托与事件介绍，使用方式。 1. C#事件：发布与订阅事件：事件属于类的成员，所以放在类的内部。 委托+事件相当于观察者模式，委托类似于观察者，它关心某种事件，一旦这种事件被触发，这个观察者就会行动 C#中使用事件需要的步骤： 创建一个委托； 将创建的委托与特定事件关联(.Net类库中的很多事件都是已经定制好的，所以他们也就有相应的一个委托，在编写关联C#事件处理程序–也就是当有事件发生时我们要执行的方法的时候我们需要和这个委托有相同的签名)； 编写C#事件处理程序； 利用编写的C#事件处理程序生成一个委托实例； 把这个委托实例添加到产生事件对象的事件列表中去，这个过程又叫订阅事件 2. 事件实现定义一个观察者和接收者实现事件的订阅和发布 声明观察者类 1234567891011121314// 定义委托事件public delegate void Notification(); public class Watcher { // 定义一个Observe的事件 public event Notification notification; public void startSendNotification() { // 观察者向接收者发送通知 Console.WriteLine(&quot;send notification &quot;); } } 声明接收者类 123456789101112131415public class Receiver { // 接收者自有字段 private string _name; public Receiver(string name) { this._name = name; } // 接收者接收通知后执行的方法 public void doSomethingWithNotification() { Console.WriteLine($&quot;{_name} do something with notification&quot;); } } 测试类 1234567891011121314public class Test { public static void Main() { // 发布者 var wathcr = new Watcher(); // 订阅者 var receiver = new Receiver(&quot;wang&quot;); // 将订阅者的动作绑定到发布者，就进行了这个动作的订阅 wathcr.strNotification += receiver.doSomethingWithNotification; // 每次发布者进行发布动作，订阅者就会执行了 wathcr.startSendNotification(); } } C#中定义了一个标准的用于事件的委托 EventHandler简化上述步骤 定义观察者类 12345678910111213141516171819202122// 定义委托事件 public delegate void Notification(); public class Watcher { // 使用EventHandler，可以传入继承EventArgs的自定义参数 public event EventHandler&lt;StringEventArgs&gt; strNotification; public void startSendNotification(String content) { var arg = new StringEventArgs(); arg._notificationContent = content; Console.WriteLine(&quot;send notification &quot; + content); strNotification?.Invoke(this, arg); // 进行通知 } } // 定义String类型的EventArgs参数 public class StringEventArgs : EventArgs { public string _notificationContent; } 定义接收者 1234567891011121314public class Receiver { private string _name; public Receiver(string name) { _name = name; } // 可以添加入参StringEventArgs接收到观察者发送的内容 public void doSomethingWithNotification(Object sender, StringEventArgs args) { Console.WriteLine($&quot;{_name} do {args._notificationContent} with notification&quot;); } } 测试类 1234567891011121314public class Test { public static void Main() { // 发布者 var wathcr = new Watcher(); // 订阅者 var receiver = new Receiver(&quot;wang&quot;); // 将订阅者的动作绑定到发布者，就进行了这个动作的订阅 wathcr.strNotification += receiver.doSomethingWithNotification; // 发布Please clean room的通知 wathcr.startSendNotification(&quot;Please clean room&quot;); } }","link":"/2023/02/02/csharp/2/"},{"title":"Java函数式编程","text":"函数式编程关注于流程而非具体实现。可以将函数作为参数或返回值。所有数据的操作都通过函数来实现。 函数式编程：函数式编程关注于流程而非具体实现。可以将函数作为参数或返回值。所有数据的操作都通过函数来实现。可以理解为数学中的函数。较新的语言基本上追求语法上的简洁基本都有支持。更关注于函数实现什么功能。 代表语言有：JAVA（8以上），js（ES6），C#，Scala，python等。命令式变成：命令式编程的主要思想是关注计算机执行的步骤，即一步一步告诉计算机先做什么再做什么。代表语言有：C, C++, Java, Javascript, BASIC,Ruby等多为老牌语言。JAVA函数式编程可以简单概括 lambda + 方法引用 + stream API = java函数式编程 lambda表达式利用lambda表达式创建一个线程，“-&gt;” 左边参数，右边方法体 123new Thread(()-&gt; System.out.println(&quot;use lambda to create a thread&quot;)).start();// 返回实现了指定接口的对象实例Runnable t = new Thread(()-&gt; System.out.println(&quot;use lambda to create a thread&quot;)); 函数式接口的实现 12345678910111213141516171819// 定义一个提供转换功能的函数式接口// @FunctionInterface，这也是为了函数调用时避免带来二义性。// @FunctionInterface并不是一定要标注但若是标注可以在编译时就给你提示错误@FunctionalInterfaceinterface ConvertToolInterface { int convert(String num);}public static void main(String[] args) { // 实现函数式接口，将传入的字符串转换成int，并*2 // 第一种实现方式 ConvertToolInterface convertTool = str -&gt; Integer.parseInt(str) * 2; // 第二种实现方式 ConvertToolInterface convertTool2 = (String str) -&gt; Integer.parseInt(str) * 2; // 第三种实现方式 ConvertToolInterface convertTool3 = (String str) -&gt; { return Integer.parseInt(str) * 2; };} default接口默认方法 默认方法：目的是为了解决接口的修改与现有的实现不兼容的问题。 12345678910111213141516171819202122232425262728293031323334// Phone接口public interface Phone { default String show(){ return &quot;This is a basic phone&quot;; }}// SmartPhone接口public interface SmartPhone { default String show(){ return &quot;This is a smart Phone&quot;; }}// 第一个解决方案是创建自己的默认方法，来覆盖重写接口的默认方法public class Iphone implements Phone, SmartPhone { @Override public String show() { return &quot;this is iphone&quot;; }}// 第二种解决方案可以使用 super 来调用指定接口的默认方法public class Iphone implements Phone, SmartPhone { @Override public String show() { return Phone.super.show(); // return SmartPhone.super.show(); }} 基本函数 接口 输入类型 返回类型 说明 Predicate T bool 断言 Consumer T / 消费一个数据 Function&lt;T,R&gt; T R 输入T输出R的函数 Supplier / T 提供一个数据 UnaryOperator T T 一元函数（输入，输出类型相同） BiFunction&lt;T,U,R&gt; T,U R 2个输入的函数 BinaryOperator T,T T 二元函数（输入，输出类型相同） 123456789101112131415161718192021222324252627282930//PredicatePredicate&lt;String&gt; predicate = str -&gt; str.equalsIgnoreCase(&quot;ok&quot;);IntPredicate intPredicate = i -&gt; i &lt; 0;System.out.println(predicate.test(&quot;OK&quot;));System.out.println(intPredicate.test(-1));//ConsumerConsumer&lt;String&gt; consumer = str -&gt; System.out.println(str);consumer.accept(&quot;result&quot;);//FunctionFunction&lt;Integer, String&gt; function = i -&gt; String.valueOf(i);System.out.println(function.apply(1234));//SupplierSupplier&lt;String&gt; supplier = () -&gt; &quot;this is result&quot;;System.out.println(supplier.get());//UnaryOperatorUnaryOperator&lt;Integer&gt; unaryOperator = x -&gt; ++x;System.out.println(unaryOperator.apply(1));//BiFunctionBiFunction&lt;String, String, Integer&gt; biFunction = (a, b) -&gt; Integer.parseInt(a) + Integer.parseInt(b);System.out.println(biFunction.apply(&quot;123&quot;, &quot;234&quot;));//BinaryOperatorBinaryOperator&lt;Integer&gt; binaryOperator = (x, y) -&gt; x * y;binaryOperator.apply(55, 35); 方法引用可以直接使用两个冒号::来调用方法 1234public static void consumer(){ Consumer&lt;String&gt; consumer = System.out::println; consumer.accept(&quot;我是一个消费者&quot;);} 1234567891011121314151617181920//定义一个Dog类public class Dog{ private int remainder = 10; public Dog(){ } // 静态方法 public static void bark(Dog dog){ String name = &quot;wangcai&quot;; System.out.println(name + &quot;this dog is barking&quot;); } // 非静态方法 public int eat(int amount){ System.out.println(&quot;eat &quot; + amount); return remainder - amount; }} 静态方法引用 1234private static void callStaticMethod() { Consumer&lt;Dog&gt; consumer = Dog::bark; consumer.accept(new Dog());} 非静态 实例方法引用 12345private static void callMethod() { Dog dog = new Dog(); Function&lt;Integer, Integer&gt; function = dog::eat; System.out.println(&quot;remain&quot; + function.apply(3));} 非静态 类方法引用 1234private static void callMethodByClass() { BiFunction&lt;Dog, Integer, Integer&gt; biFunction = Dog::eat; System.out.println(&quot;remain&quot; + biFunction.apply(new Dog(),4));} 构造函数方法引用 1234private static void callConstructorMethod() { Supplier&lt;Dog&gt; supplier = Dog::new; System.out.println(&quot;new a object&quot; + supplier.get());} 数据不变模式 123456private static void callMethod2() { Dog dog = new Dog(); Function&lt;Integer,Integer&gt; function = dog::eat; //函数声明 dog = null; System.out.println(&quot;remain &quot; + function.apply(3));} Stream参考链接 Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 特点： 不是数据结构，不会保存数据。 不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素） 惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。 使用参考链接 https://blog.csdn.net/y_k_y/article/details/84633001","link":"/2023/02/04/java/1/"},{"title":"Java并发基础","text":"本系列文章将从基础开始介绍Java并发，从最简单的Thread开始到线程池，归纳、介绍总结Java并发的使用和原理。 介绍线程之前，我们先了解一下几个概念 进程：是操作系统对一个正在执行的程序的一种抽象结构。进程在运行时需要一定的资源，如cpu、存储空间和I/O。 线程： 线程时进程内部的一条访问路径。线程能独立运行，独立调度，拥有资源。同一个进程的多个线程共享进程的资源。 协程/纤程：协程是用户模式下的轻量级线程，操作系统内核对协程一无所知。协程的调度完全由应用程序来控制。一个线程包含多个协程。协程与线程的区别在于在多处理器下，多线程程序可以同时运行多个线程；而协同程序需要通过协作来完成，在任一时刻只有一个协同程序在运行。Windows下的协程叫纤程。 通过以下问题逐步了解Java中的线程 线程有哪些状态，状态之间如何转换？ 如何创建线程，有哪些方式？ 线程机制有哪些？ 线程状态与转换 新建（New）：创建后尚未启动。 可运行（Runnable）：可能正在运行，也可能正在等待 CPU 时间片。包含了操作系统线程状态中的 Running 和 Ready。 阻塞（Blocking）：等待获取一个排它锁，如果其线程释放了锁就会结束此状态。 无限等待（Waiting）：等待其他线程唤醒。Object.wait()、Thread.join()、LockSupport.park() 期限等待（Timed Waiting）：无需等待其他线程唤醒。在设置时间结束之后会被系统自动的唤醒 死亡（Terminate）：可以是线程结束任务之后自己结束，或者产生了异常而结束。 线程的使用方法 实现Runnable接口，使用Thread类启动。 1234567public class MyThread1 implements Runnable{ @Override public void run() { System.out.println(&quot;run my thread 1 using implementing Runnable method&quot;); } } 实现Callable接口，使用FutureTask启动，此方法可以设定线程的返回值。 12345678public class MyThread2 implements Callable&lt;String&gt;{ @Override public String call() throws Exception { System.out.println(&quot;run my thread 2 using implementing Callable method and return sth&quot;); return &quot;result&quot;; } } 集成Thread，重写run()方法，使用Thread启动。 12345public static class MyThread3 extends Thread{ public void run(){ System.out.println(&quot;run my thread 3 using extending Thread&quot;); } } 线程启动 12345678910111213141516public static void main(String[] args) throws ExecutionException, InterruptedException { // 启动线程1 Thread t1 = new Thread(new MyThread1()); t1.start(); // 启动线程2，并获取返回值 FutureTask&lt;String&gt; future = new FutureTask&lt;&gt;(new MyThread2()); Thread t2 = new Thread(future); t2.start(); String result = future.get(); System.out.println(result); // 启动线程3 Thread t3 = new Thread(new MyThread3()); t3.start(); } 使用线程时，推荐使用实现Runnable或Callable接口的方法。实现接口只需实现方法，继承整个Thread开销过大，同时Java类可以实现多个接口但无法继承多个类。 基础线程机制 Daemon守护线程 守护线程（Daemon Thread）是个服务线程，准确地来说就是服务其他的线程，这是它的作用——而其他的线程只有一种，就是用户线程。所以Java线程分2种。 守护线程：比如垃圾回收线程。 用户线程：就是应用程序里的自定义线程。 当用户线程完成时，为他所创建的守护线程就会终止。 1234567891011121314151617181920212223242526public class DaemonThread implements Runnable{ @Override public void run() { try { while(true){ System.out.println(&quot;send message every 1s&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } }finally { System.out.println(&quot;sub thread finished&quot;); } } public static void main(String[] args) throws InterruptedException { Thread t1 = new Thread(new DaemonThread()); t1.setDaemon(true); t1.start(); Thread.sleep(2000); System.out.println(&quot;finish the main task&quot;); }} 如果没有将定义的线程设为守护线程，则主程序执行完成后，子线程依然会继续每秒打印信息，相反，则DaemonThread会随着主线程的执行退出，从结果看在主线程停留的2s内执行了两次。符合预期。 Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。 yield() 暂停当前正在执行的线程对象，并执行其他线程。对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。 123456789101112131415161718192021222324252627public class YieldThreadTest implements Runnable{ private String name; public YieldThreadTest(String name){ this.name = name; } @Override public void run() { for(int i=0; i&lt;10; i++){ if(&quot;t1&quot;.equals(name) &amp;&amp; i == 5){ System.out.println(name + &quot; : &quot; + &quot;pause&quot;); Thread.yield(); } System.out.println(name + &quot; execute : &quot; + (i + 1)); } } public static void main(String[] args) { Thread t1 = new Thread(new YieldThreadTest(&quot;t1&quot;)); Thread t2 = new Thread(new YieldThreadTest(&quot;t2&quot;)); Thread t3 = new Thread(new YieldThreadTest(&quot;t3&quot;)); t1.start(); t2.start(); t3.start(); }} Interrupted() 中断线程，调用interrupted()方法会设置线程的中断标记，此时调用interrupted()方法会返回true。可以通过判断interrupted()方法来提前结束线程。","link":"/2023/03/21/java/concurrency/1/"},{"title":"Java synchronized","text":"本文从synchronized关键字入手，介绍Java中线程的同步互斥机制。 开篇介绍系统的内核与用户态 内核：本质上看是一种软件——控制计算机的硬件资源，并提供上层应用程序运行的环境。cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序。 用户态：上层应用程序的活动空间，只能受限的访问内存，且不允许访问外围设备，占用cpu的能力被剥夺，cpu资源可以被其他程序获取。应用程序的执行必须依托于内核提供的资源，包括CPU资源、存储资源、I/O资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。 线程同步互斥synchronized同步代码块：作用于一个对象，当两个线程调用一个对象的同步代码块时，当一个线程进入同步语句块时，另一个线程就必须等待。同步方法：与代码块一样，作用与同一个对象。同步类：sychronized(xxx.class)，作用于整个类，即使是不同的对象，不同的线程也会进行同步等待。同步静态方法：同样作用于整个类 线程间协作当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。 join() 在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* 先启动B线程，正常情况下B线程耗时较少应该会首先完成，但B线程中使用了A线程的join()方法 因此B线程会等到A线程执行成功后才会完成。*/public class ThreadCooperation { public static class ThreadA implements Runnable{ @Override public void run() { try { System.out.println(&quot;ThreadA execute start&quot;); Thread.sleep(4000); System.out.println(&quot;ThreadA execute end&quot;); } catch (InterruptedException e) { e.printStackTrace(); } } } public static class ThreadB implements Runnable{ private Thread threadA; public ThreadB(Thread threadA){ this.threadA = threadA; } @Override public void run() { System.out.println(&quot;ThreadB execute start&quot;); try { Thread.sleep(1000); threadA.join(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(&quot;ThreadB execute end&quot;); } } public static void main(String[] args) { Thread t1 = new Thread(new ThreadA()); Thread t2 = new Thread(new ThreadB(t1)); t2.start(); t1.start(); }}ThreadB execute startThreadA execute startThreadA execute endThreadB execute end wait() notify() notifyAll() 在调用wait方法时，线程必须要持有被调用对象的锁，当调用wait方法后，线程就会释放掉该对象的锁(monitor)在调用Thread类的sleep方法时，线程是不会释放掉对象的锁的。 关于wait与notify和notifyAll方法的总结： 当调用wait时，首先需要确保调用了wait方法的线程已经持有了对象的锁。 当调用wait后，该线程就会释放掉这个对象的锁，然后进入到等待状态（wait set）。 当线程调用了wait后进入到等待状态时，它就可以等待其他线程调用相同对象的notify或notifyAll方法来使得自己被唤醒。 一旦这个线程被其他线程唤醒后，该线程就会与其他线程一同开始竞争这个对象的锁（公平竞争）；只有当该线程获取到了这个对象的锁后，线程才会继续往下执行。 调用wait方法的代码片段需要放在一个synchronized块或是synchronized方法中，这样才可以确保线程在调用wait方法前已经获取到了对象的锁。 当调用对象的notify方法时，它会随机唤醒该对象等待集合（wait set）中的任意一个线程，当某个线程被唤醒后，它就会与其他线程一同竞争对象的锁。 当调用对象的notifyAll方法时，它会唤醒该对象等待集合（wait set）中的所有线程，这些线程被唤醒后，又会开始竞争对象的锁。 在某一时刻，只有唯一一个线程可以拥有对象的锁。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/* 以下代码实现两个线程同时调用但结果实现101010..且不会出现交叉错误。 当add被notify唤醒时，会先进行counter的判断，如果因其他线程唤满足了满段条件， 会继续执行wait()等待*/public class Counter { private int counter = 0; Object[] items = new Object[100]; public synchronized void add() throws InterruptedException { // 当counter==1时，将线程wait，等待被唤醒 while(counter != 0){ wait(); } counter++; System.out.print(counter); notify(); } public synchronized void minus() throws InterruptedException { while(counter != 1){ wait(); } counter--; System.out.print(counter); notify(); BigDecimal decimal = new BigDecimal(100); }}public static void main(String[] args) throws InterruptedException { Counter counter = new Counter(); Runnable addThread = () -&gt; { for(int i =0; i&lt;30; i++){ try { Thread.sleep((long) (Math.random() * 1000)); counter.add(); } catch (InterruptedException e) { e.printStackTrace(); } } }; Runnable minusThread = () -&gt; { for(int i = 0; i &lt; 30; i++){ try { Thread.sleep((long) (Math.random() * 1000)); counter.minus(); } catch (InterruptedException e) { e.printStackTrace(); } } }; Thread t1 = new Thread(addThread); t1.start(); Thread t2 = new Thread(minusThread); t2.start(); } wait() 和 sleep() 的区别 wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法； wait() 会释放锁，sleep() 不会。 synchronized原理Sychronized方法执行前，该线程一定是已经获得了对象的锁才能继续往下执行。使用while代替if可以保证在两个以上的多线程情况下正确执行，if下程序被唤醒时counter的状态不一定为设定的条件，所以需要使用while对其再做判断才能保证条件wait的条件是否被满足。这也是为何上文所说到的sychronized与while通常要一起使用。当我们使用synchronized关键字来修饰代码块时，字节码层面上是通过monitorenter与monitorexit指令来实现的锁的获取与释放动作。当线程进入到monitorenter指令后，线程将会持有Monitor对象，退出monitorenter指令后，线程将会释放Monitor对象。对于synchronized关键字修饰方法来说，并没有出现monitorenter与monitorexit指令，而是出现了一个ACC_SYNCHRONIZED标志。JVM使用了ACC_SYNCHRONIZED访问标志来区分一个方法是否为同步方法；当方法被调用时，调用指令会检查该方法是否拥有ACC_SYNCHRONIZED标志，如果有，那么执行线程将会先持有方法所在对象的Monitor对象，然后再去执行方法体；在该方法执行期间，其他任何线程均无法再获取到这个Monitor对象，当线程执行完该方法后，它会释放掉这个Monitor对象。 synchronized底层实现JVM中的同步是基于进入与退出监视器对象（管程对象）（Monitor）来实现的，每个对象实例都会有一个Monitor对象，Monitor对象会和Java对象一同创建并销毁。Monitor对象是由C++来实现的。当多个线程同时访问一段同步代码时，这些线程会被放到一个EntryList集合中，处于阻塞状态的线程都会被放到该列表当中。接下来，当线程获取到对象的Monitor时，Monitor是依赖于底层操作系统的mutex lock来实现互斥的，线程获取mutex成功，则会持有该mutex，这时其他线程就无法再获取到该mutex。如果线程调用了wait方法，那么该线程就会释放掉所持有的mutex，并且该线程会进入到WaitSet集合（等待集合）中，等待下一次被其他线程调用notify/notifyAll唤醒。如果当前线程顺利执行完毕方法，那么它也会释放掉所持有的mutex。总结一下：同步锁在这种实现方式当中，因为Monitor是依赖于底层的操作系统实现，这样就存在用户态与内核态之间的切换，所以会增加性能开销。通过对象互斥锁的概念来保证共享数据操作的完整性。每个对象都对应于一个可称为『互斥锁』的标记，这个标记用于保证在任何时刻，只能有一个线程访问该对象。那些处于EntryList与WaitSet中的线程均处于阻塞状态，阻塞操作是由操作系统来完成的，在linux下是通过pthread_mutex_lock函数实现的。线程被阻塞后便会进入到内核调度状态，这会导致系统在用户态与内核态之间来回切换，严重影响锁的性能。解决上述问题的办法便是自旋（Spin）。其原理是：当发生对Monitor的争用时，若Owner能够在很短的时间内释放掉锁，则那些正在争用的线程就可以稍微等待一下（即所谓的自旋），在Owner线程释放锁之后，争用线程可能会立刻获取到锁，从而避免了系统阻塞。不过，当Owner运行的时间超过了临界值后，争用线程自旋一段时间后依然无法获取到锁，这时争用线程则会停止自旋而进入到阻塞状态。所以总体的思想是：先自旋，不成功再进行阻塞，尽量降低阻塞的可能性，这对那些执行时间很短的代码块来说有极大的性能提升。显然，自旋在多处理器（多核心）上才有意义。 补充：互斥锁的属性 PTHREAD_MUTEX_TIMED_NP：这是缺省值，也就是普通锁。当一个线程加锁以后，其余请求锁的线程将会形成一个等待队列，并且在解锁后按照优先级获取到锁。这种策略可以确保资源分配的公平性。 PTHREAD_MUTEX_RECURSIVE_NP：嵌套锁。允许一个线程对同一个锁成功获取多次，并通过unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新进行竞争。 PTHREAD_MUTEX_ERRORCHECK_NP：检错锁。如果一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同，这样就保证了当不允许多次加锁时不会出现最简单情况下的死锁。 PTHREAD_MUTEX_ADAPTIVE_NP：适应锁，动作最简单的锁类型，仅仅等待解锁后重新竞争。","link":"/2023/03/21/java/concurrency/2/"},{"title":"Java Lock","text":"本文介绍Java.concurrent下Lock接口。 synchronized与Lock比较在JDK 1.5之前，我们若想实现线程同步，只能通过synchronized关键字这一种方式来达成；底层，Java也是通过synchronized关键字来做到数据的原子性维护的；synchronized关键字是JVM实现的一种内置锁，从底层角度来说，这种锁的获取与释放都是由JVM帮助我们隐式实现的。从JDK 1.5开始，并发包引入了Lock锁，Lock同步锁是基于Java来实现的，因此锁的获取与释放都是通过Java代码来实现与控制的；然而，synchronized是基于底层操作系统的Mutex Lock来实现的，每次对锁的获取与释放动作都会带来用户态与内核态之间的切换，这种切换会极大地增加系统的负担；在并发量较高时，也就是说锁的竞争比较激烈时，synchronized锁在性能上的表现就非常差。 从JDK 1.6开始，synchronized锁的实现发生了很大的变化；JVM引入了相应的优化手段来提升synchronized锁的性能，这种提升涉及到偏向锁、轻量级锁及重量级锁等，从而减少锁的竞争所带来的用户态与内核态之间的切换；这种锁的优化实际上是通过Java对象头中的一些标志位来去实现的；对于锁的访问与改变，实际上都与Java对象头息息相关。 从JDK 1.6开始，对象实例在堆当中会被划分为三个组成部分：对象头、实例数据与对齐填充。对象头主要也是由3块内容来构成： Mark Word 指向类的指针 数组长度 其中Mark Word（它记录了对象、锁及垃圾回收相关的信息，在64位的JVM中，其长度也是64bit）的位信息包括了如下组成部分： 无锁标记 偏向锁标记 轻量级锁标记 重量级锁标记 GC标记 对于synchronized锁来说，锁的升级主要都是通过Mark Word中的锁标志位与是否是偏向锁标志位来达成的；synchronized关键字所对应的锁都是先从偏向锁开始，随着锁竞争的不断升级，逐步演化至轻量级锁，最后则变成了重量级锁。对于锁的演化来说，它会经历如下阶段：无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁 偏向锁bias针对于一个线程来说的，它的主要作用就是优化同一个线程多次获取一个锁的情况；如果一个synchronized方法被一个线程访问，那么这个方法所在的对象就会在其Mark Word中将偏向锁进行标记，同时还会有一个字段来存储该线程的ID；当这个线程再次访问同一个synchronized方法时，它会检查这个对象的Mark Word的偏向锁标记以及是否指向了其线程ID，如果是的话，那么该线程就无需再去进入管程（Monitor）了，而是直接进入到该方法体中。如果是另外一个线程访问这个synchronized方法，那么实际情况会如何呢？偏向锁会被取消掉。 轻量级锁适合两个线程的轮流访问，不适合多个线程的访问若第一个线程已经获取到了当前对象的锁，这时第二个线程又开始尝试争抢该对象的锁，由于该对象的锁已经被第一个线程获取到，因此它是偏向锁，而第二个线程在争抢时，会发现该对象头中的Mark Word已经是偏向锁，但里面存储的线程ID并不是自己（是第一个线程），那么它会进行CAS（Compare and Swap），从而获取到锁，这里面存在两种情况： 获取锁成功：那么它会直接将Mark Word中的线程ID由第一个线程变成自己（偏向锁标记位保持不变），这样该对象依然会保持偏向锁的状态。 获取锁失败：则表示这时可能会有多个线程同时在尝试争抢该对象的锁，那么这时偏向锁就会进行升级，升级为轻量级锁 自旋锁若自旋失败（依然无法获取到锁），那么锁就会转化为重量级锁，在这种情况下，无法获取到锁的线程都会进入到Monitor（即内核态）自旋最大的一个特点就是避免了线程从用户态进入到内核态。 重量级锁线程最终从用户态进入到了内核态。 编译器对于锁的优化措施锁消除技术JIT编译器（Just In Time编译器）可以在动态编译同步代码时，使用一种叫做逃逸分析的技术，来通过该项技术判别程序中所使用的锁对象是否只被一个线程所使用，而没有散布到其他线程当中；如果情况就是这样的话，那么JIT编译器在编译这个同步代码时就不会生成synchronized关键字所标识的锁的申请与释放机器码，从而消除了锁的使用流程。 锁粗化 JIT编译器在执行动态编译时，若发现前后相邻的synchronized块使用的是同一个锁对象，那么它就会把这几个synchronized块给合并为一个较大的同步块，这样做的好处在于线程在执行这些代码时，就无需频繁申请与释放锁了，从而达到申请与释放锁一次，就可以执行完全部的同步代码块，从而提升了性能。 死锁：线程1等待线程2互斥持有的资源，而线程2也在等待线程1互斥持有的资源，两个线程都无法继续执行。活锁：线程持续重试一个总是失败的操作，导致无法继续执行。饿死：线程一直被调度器延迟访问其赖以执行的资源，也许是调度器先于低优先级的线程而执行高优先级的线程，同时总是会有一个高优先级的线程可以执行，饿死也叫做无限延迟。 Lock与synchronized重要差别 锁的获取方式：前者是通过程序代码的方式由开发者手工获取，后者是通过JVM来获取（无需开发者干预） 具体实现方式：前者是通过Java代码的方式来实现，后者是通过JVM底层来实现 （无需开发者关注） 锁的释放方式：前者务必通过unlock()方法在finally块中手工释放，后者是通过JVM来释放（无需开发者关注） 锁的具体类型：前者提供了多种，如公平锁、非公平锁，后者与前者均提供了可重入锁。 Lock使用示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122import java.util.Arrays;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;import java.util.stream.IntStream;public class MyTest2 { public static void main(String[] args) { BoundedContainer boundedContainer = new BoundedContainer(); IntStream.range(0, 10).forEach(i -&gt; new Thread(() -&gt; { try { boundedContainer.put(&quot;hello&quot;); } catch (InterruptedException ex) { ex.printStackTrace(); } }).start()); IntStream.range(0, 10).forEach(i -&gt; new Thread(() -&gt; { try { boundedContainer.take(); } catch (InterruptedException ex) { ex.printStackTrace(); } }).start()); }}class BoundedContainer { private String[] elements = new String[10]; // 可重入锁 private Lock lock = new ReentrantLock(); //非空条件，唤醒take线程的条件 private Condition notEmptyCondition = lock.newCondition(); //非满条件，唤醒put线程的条件 private Condition notFullCondition = lock.newCondition(); private int elementCount; // elements数组中已有的元素数量 private int putIndex; private int takeIndex; public void put(String element) throws InterruptedException { this.lock.lock(); try { while (this.elementCount == this.elements.length) { // 当队列已满时，让非满条件等待 notFullCondition.await(); } elements[putIndex] = element; if (++putIndex == this.elements.length) { putIndex = 0; } ++elementCount; System.out.println(&quot;put method: &quot; + Arrays.toString(elements)); // 通知另一个线程可以获取了 notEmptyCondition.signal(); } finally { this.lock.unlock(); } } public String take() throws InterruptedException { this.lock.lock(); try { while (0 == this.elementCount) { // 当队列为空时，让非满条件等待 notEmptyCondition.await(); } String element = elements[takeIndex]; elements[takeIndex] = null; if (++takeIndex == this.elements.length) { takeIndex = 0; } --elementCount; System.out.println(&quot;take method: &quot; + Arrays.toString(elements)); // 通知另一个线程往里面放数据 notFullCondition.signal(); return element; } finally { this.lock.unlock(); } }}执行结果put method: [hello, null, null, null, null, null, null, null, null, null]put method: [hello, hello, null, null, null, null, null, null, null, null]put method: [hello, hello, hello, null, null, null, null, null, null, null]put method: [hello, hello, hello, hello, null, null, null, null, null, null]take method: [null, hello, hello, hello, null, null, null, null, null, null]put method: [null, hello, hello, hello, hello, null, null, null, null, null]put method: [null, hello, hello, hello, hello, hello, null, null, null, null]take method: [null, null, hello, hello, hello, hello, null, null, null, null]put method: [null, null, hello, hello, hello, hello, hello, null, null, null]put method: [null, null, hello, hello, hello, hello, hello, hello, null, null]take method: [null, null, null, hello, hello, hello, hello, hello, null, null]put method: [null, null, null, hello, hello, hello, hello, hello, hello, null]put method: [null, null, null, hello, hello, hello, hello, hello, hello, hello]take method: [null, null, null, null, hello, hello, hello, hello, hello, hello]take method: [null, null, null, null, null, hello, hello, hello, hello, hello]take method: [null, null, null, null, null, null, hello, hello, hello, hello]take method: [null, null, null, null, null, null, null, hello, hello, hello]take method: [null, null, null, null, null, null, null, null, hello, hello]take method: [null, null, null, null, null, null, null, null, null, hello]take method: [null, null, null, null, null, null, null, null, null, null]","link":"/2023/03/24/java/concurrency/3/"},{"title":"JUC原子类","text":"JUC中多数类是通过volatile和CAS来实现的，CAS本质上提供的是一种无锁方案，而Synchronized和Lock是互斥锁方案; java原子类本质上使用的是CAS，而CAS底层是通过Unsafe类实现的。 CASCAS全称为Compare-And-Swap，是一条CPU的原子指令，其作用是让CPU比较两个值是否相等，然后原子的更新某个位置的值，其实现方式是基于硬件平台的汇编指令，JVM只是封装了汇编调用。AtomicInteger类是使用了这些封装后的接口。 CAS操作需要输入两个数值，一个旧值(期望操作前的值)和一个新值，在操作期间先比较下在旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换。 Java使用CAS示例 12345678public class CASTest { private AtomicInteger i = new AtomicInteger(0); public Integer addAndGet(){ return i.getAndIncrement(); }} CAS为乐观锁，synchronized为悲观锁，因此CAS性能更优。但CAS也会存在问题。 以下转载： ABA问题因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。 ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A。 从Java 1.5开始，JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值 循环时间长开销大自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令(de-pipeline)，使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突(Memory Order Violation)而引起CPU流水线被清空(CPU Pipeline Flush)，从而提高CPU的执行效率。 只能保证一个共享变量的原子操作当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。 还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i = 2，j = a，合并一下ij = 2a，然后用CAS来操作ij。 从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作 上文我们了解到Java原子类是通过UnSafe类实现的。 著作权归@pdai所有原文链接：https://pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html AtomicInteger常用API123456789101112//获取当前的值public final int get()//获取当前的值，并设置新的值public final int getAndSet(int newValue)//获取当前的值，并自增public final int getAndIncrement()//获取当前的值，并自减public final int getAndDecrement()//获取当前的值，并加上预期的值public final int getAndAdd(int delta)//最终会设置成newValue,使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。void lazySet(int newValue) AtomicReference123456789101112131415161718192021public class AtomicReferenceTest { public static void main(String[] args) { Student student1 = new Student(&quot;a&quot;, 15); Student student2 = new Student(&quot;b&quot;, 16); // 初始student1 AtomicReference&lt;Student&gt; studentReference = new AtomicReference&lt;&gt;(student1); // student1与student2不相等，所以会进行交换 studentReference.compareAndSet(student1, student2); Student student3 = studentReference.get(); System.out.println(student3); // 此时的student3与student2不相等返回false System.out.println(student3.equals(student1)); } /* 结果 Student{name='b', age=16} false */} 原子更新字段类 AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器。 AtomicLongFieldUpdater: 原子更新长整型字段的更新器。 AtomicReferenceFieldUpdater: 上面已经说过此处不在赘述。 类的字段必须满足以下条件 原子更新字段类都是抽象类，每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。 更新类的字段必须使用public volatile修饰。 示例： 12345678910111213141516171819public class UserData { public volatile int publicIntField = 6; protected volatile int protectedIntField = 8; private volatile int privateIntField = 10; public volatile static int staticIntField = 156; public volatile Integer integerVar = 48; public volatile Long longVar = 56L; public static void main(String[] args) { String fieldName = &quot;publicIntField&quot;; // 设置更新的字段是publicIntField AtomicIntegerFieldUpdater&lt;UserData&gt; userDataAtomicIntegerFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(UserData.class, fieldName); UserData userData = new UserData(); // 将字段值更新为100 userDataAtomicIntegerFieldUpdater.getAndSet(userData, 100); System.out.println(userData.publicIntField); }} 字段有所限制 字段必须是volatile类型的，在线程之间共享变量时保证立即可见.eg:volatile int value = 3 字段的描述类型(修饰符public/protected/default/private)是与调用者与操作对象字段的关系一致。也就是说调用者能够直接操作对象字段，那么就可以反射进行原子操作。但是对于父类的字段，子类是不能直接操作的，尽管子类可以访问父类的字段。 只能是实例变量，不能是类变量，也就是说不能加static关键字。 只能是可修改变量，不能使final变量，因为final的语义就是不可修改。实际上final的语义和volatile是有冲突的，这两个关键字不能同时存在。 对于AtomicIntegerFieldUpdater和AtomicLongFieldUpdater只能修改int/long类型的字段，不能修改其包装类型(Integer/Long)。如果要修改包装类型就需要使用AtomicReferenceFieldUpdater 著作权归@pdai所有原文链接：https://pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html AtomicStampedReference针对变量值的元素值没有改变，但是版本号发生了改变的情况。也就是上文所说的ABA问题。此外，AtomicMarkableReference也提供了支持，但是使用的是一个boolean类型的标记。","link":"/2023/03/28/java/concurrency/4/"}],"tags":[{"name":"日本語","slug":"日本語","link":"/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"标准日语","slug":"标准日语","link":"/tags/%E6%A0%87%E5%87%86%E6%97%A5%E8%AF%AD/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"CS","slug":"CS","link":"/tags/CS/"},{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"日本語","slug":"日本語","link":"/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"C#","slug":"C","link":"/categories/C/"},{"name":"java","slug":"java","link":"/categories/java/"}],"pages":[{"title":"文章分类","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}